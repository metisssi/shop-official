const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const config = require('./config/config');
const Database = require('./database');
const ClientHandler = require('./handler/clientHandler');

// –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
const AdminHandler = require('./handler/adminHandler');
const AdminUtils = require('./utils/adminUtils');
const adminConfig = require('./config/adminConfig');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
console.log('- BOT_TOKEN:', config.BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('- MONGODB_URI:', config.MONGODB_URI ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('- OPERATORS:', Object.keys(config.OPERATORS).length, '–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤');
console.log('- ADMIN_IDS:', adminConfig.getAdminIds().length, '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');

class RealEstateBot {
    constructor() {
        console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...');

        try {
            this.bot = new TelegramBot(config.BOT_TOKEN, { polling: true });
            console.log('‚úÖ Telegram Bot API –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot API:', error);
            process.exit(1);
        }

        try {
            this.database = new Database();
            console.log('‚úÖ Database –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Database:', error);
            process.exit(1);
        }

        try {
            this.clientHandler = new ClientHandler(this.bot, this.database);
            console.log('‚úÖ ClientHandler —Å–æ–∑–¥–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ClientHandler:', error);
            process.exit(1);
        }

        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –º–æ–¥—É–ª–µ–π
            this.adminUtils = new AdminUtils(this.bot);
            this.adminHandler = new AdminHandler(this.bot, adminConfig.getAdminIds());

            // –î–µ–ª–∞–µ–º adminUtils –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
            global.adminUtils = this.adminUtils;
            console.log('‚úÖ –ê–¥–º–∏–Ω –º–æ–¥—É–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω –º–æ–¥—É–ª–µ–π:', error);
            process.exit(1);
        }

        this.setupHandlers();

        // –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π
        this.adminUtils.startSessionCleaner();

        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        this.bot.getUpdates({ offset: -1 }).then(() => {
            console.log('üßπ –°—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
        }).catch(err => {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err.message);
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
    escapeMarkdown(text) {
        if (!text) return '';
        return text.replace(/[_*[\]()~`>#+\-=|{}.!\\]/g, '\\$&');
    }

    setupHandlers() {
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
        this.bot.on('polling_error', (error) => {
            console.error('‚ùå Polling error:', error);
        });

        this.bot.on('error', (error) => {
            console.error('‚ùå Bot error:', error);
        });

        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.onText(/\/start/, (msg) => {
            console.log('üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from.id);
            this.clientHandler.handleStart(msg);
        });

        // –ö–æ–º–∞–Ω–¥–∞ /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        this.bot.onText(/\/admin/, (msg) => {
            console.log('üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from.id);
            if (!adminConfig.isAdmin(msg.from.id)) {
                console.log('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
                return this.bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            }
            this.adminHandler.showAdminMenu(msg.chat.id);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        this.bot.on('photo', (msg) => {
            console.log('üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from.id);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            if (!adminConfig.isAdmin(msg.from.id)) {
                console.log('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
                return this.bot.sendMessage(msg.chat.id, '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
            const session = this.adminUtils.getSession(msg.from.id);
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', session);

            if (!session || session.type !== 'uploading_product_photo') {
                console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
                return this.bot.sendMessage(msg.chat.id,
                    '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /admin ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ ‚Üí –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ ‚Üí –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ');
            }

            console.log('‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ AdminHandler');
            // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ AdminHandler
            this.adminHandler.handlePhotoUpload(msg);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        this.bot.on('callback_query', (callbackQuery) => {
            console.log('üìû –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', callbackQuery.from.id, '–¥–∞–Ω–Ω—ã–µ:', callbackQuery.data);

            // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∏–π callback –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
            if (adminConfig.isAdmin(callbackQuery.from.id) &&
                callbackQuery.data.startsWith('admin_')) {
                console.log('üëë –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ callback');
                // AdminHandler —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ callback'–∏
                return;
            }

            // –û–±—ã—á–Ω—ã–µ callback'–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            console.log('üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ callback');
            this.clientHandler.handleCallback(callbackQuery);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', (msg) => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if (msg.text && msg.text.startsWith('/')) return;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
            if (msg.photo) return;

            console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from.id, '—Ç–µ–∫—Å—Ç:', msg.text);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è
            const session = this.adminUtils.getSession(msg.from.id);
            if (session && adminConfig.isAdmin(msg.from.id)) {
                console.log('üëë –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞');
                this.handleAdminInput(msg, session);
                return;
            }

            // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            console.log('üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
            this.clientHandler.handleTextMessage(msg);
        });

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
        console.log(`üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ${adminConfig.getAdminIds().join(', ')}`);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    async handleAdminInput(msg, session) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;

        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞:', {
            userId,
            sessionType: session.type,
            text: text ? text.substring(0, 50) : 'no text'
        });

        try {
            switch (session.type) {
                case 'adding_category_name':
                    await this.handleCategoryNameInput(chatId, userId, text);
                    break;

                case 'editing_category_name':
                    await this.handleEditCategoryName(chatId, userId, text, session.data.categoryId);
                    break;

                case 'adding_product_name':
                    await this.handleProductNameInput(chatId, userId, text, session.data.categoryId);
                    break;

                case 'adding_product_price':
                    await this.handleNewProductPriceInput(chatId, userId, text, session.data);
                    break;

                case 'editing_product_name':
                    await this.handleEditProductName(chatId, userId, text, session.data.productId);
                    break;

                case 'editing_product_description':
                    await this.handleEditProductDescription(chatId, userId, text, session.data.productId);
                    break;

                case 'editing_product_price':
                    await this.handleProductPriceInput(chatId, userId, text, session.data.productId);
                    break;

                case 'adding_operator_name':
                    await this.handleOperatorNameInput(chatId, userId, text);
                    break;

                case 'adding_operator_username':
                    await this.handleOperatorUsernameInput(chatId, userId, text, session.data.operatorName);
                    break;

                case 'editing_operator_name':
                    await this.handleEditOperatorName(chatId, userId, text, session.data.operatorId);
                    break;

                case 'editing_operator_username':
                    await this.handleEditOperatorUsername(chatId, userId, text, session.data.operatorId);
                    break;

                default:
                    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏:', session.type);
                    this.adminUtils.clearSession(userId);
                    this.bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                    break;
            }
        } catch (error) {
            console.error('Admin input error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ô ===
    async handleCategoryNameInput(chatId, userId, text) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Category = require('./models/Category');
            const category = new Category({
                name: validation.value,
                description: '',
                isActive: true,
                order: 0
            });

            await category.save();
            this.adminUtils.clearSession(userId);

            const escapedName = this.escapeMarkdown(validation.value);
            this.bot.sendMessage(chatId, `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${escapedName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`, {
                parse_mode: 'Markdown'
            });

            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Create category error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        }
    }

    async handleEditCategoryName(chatId, userId, text, categoryId) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Category = require('./models/Category');
            await Category.findByIdAndUpdate(categoryId, { name: validation.value });

            this.adminUtils.clearSession(userId);
            const escapedName = this.escapeMarkdown(validation.value);
            this.bot.sendMessage(chatId, `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${escapedName}"`, {
                parse_mode: 'Markdown'
            });

            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit category name error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–û–í–ê–†–û–í (–ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –¶–ï–ù–´) ===
    async handleProductNameInput(chatId, userId, text, categoryId) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        this.adminUtils.createSession(userId, 'adding_product_price', {
            categoryId: categoryId,
            productName: validation.value
        });

        const escapedName = this.escapeMarkdown(validation.value);
        this.bot.sendMessage(chatId, `üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: "${escapedName}"\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –∫—Ä–æ–Ω–∞—Ö (–ª—é–±—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É):`, {
            parse_mode: 'Markdown'
        });
    }

    async handleNewProductPriceInput(chatId, userId, text, sessionData) {
        const validation = this.adminUtils.validatePrice(text);

        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Property = require('./models/Property');

            const priceCZK = validation.value;

            const product = new Property({
                categoryId: sessionData.categoryId,
                name: sessionData.productName,
                description: '',
                priceInCZK: priceCZK,
                currency: 'CZK',
                specifications: {},
                isAvailable: true,
                order: 0,
                photos: []
            });

            await product.save();
            this.adminUtils.clearSession(userId);

            const escapedName = this.escapeMarkdown(sessionData.productName);
            this.bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "${escapedName}" —Å–æ–∑–¥–∞–Ω!\n\nüí∞ –¶–µ–Ω–∞: ${this.formatPrice(priceCZK)}\n\nüì∑ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.`, {
                parse_mode: 'Markdown'
            });

            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Create product error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.');
        }
    }

    async handleEditProductName(chatId, userId, text, productId) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Property = require('./models/Property');
            await Property.findByIdAndUpdate(productId, { name: validation.value });

            this.adminUtils.clearSession(userId);
            const escapedName = this.escapeMarkdown(validation.value);
            this.bot.sendMessage(chatId, `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${escapedName}"`, {
                parse_mode: 'Markdown'
            });

            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit product name error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.');
        }
    }

    async handleEditProductDescription(chatId, userId, text, productId) {
        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', { userId, productId, text: text?.substring(0, 50) });

        if (!text || text.trim().length === 0) {
            return this.bot.sendMessage(chatId, `‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        const trimmedText = text.trim();
        if (trimmedText.length > 500) {
            return this.bot.sendMessage(chatId, `‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤ (—Å–µ–π—á–∞—Å: ${trimmedText.length}).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Property = require('./models/Property');
            const product = await Property.findById(productId);

            if (!product) {
                this.adminUtils.clearSession(userId);
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            await Property.findByIdAndUpdate(productId, { description: trimmedText });

            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');

            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit product description error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.');
        }
    }

    async handleProductPriceInput(chatId, userId, text, productId) {
        const validation = this.adminUtils.validatePrice(text);

        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Property = require('./models/Property');
            const product = await Property.findById(productId);

            if (!product) {
                this.adminUtils.clearSession(userId);
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }

            const priceCZK = validation.value;

            const updateData = {
                priceInCZK: priceCZK,
                currency: 'CZK'
            };

            await Property.findByIdAndUpdate(productId, updateData);

            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, `‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\nüí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${this.formatPrice(priceCZK)}`, {
                parse_mode: 'Markdown'
            });

            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit product price error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞.');
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–ü–ï–†–ê–¢–û–†–û–í ===
    async handleOperatorNameInput(chatId, userId, text) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        this.adminUtils.createSession(userId, 'adding_operator_username', {
            operatorName: validation.value
        });

        const escapedName = this.escapeMarkdown(validation.value);
        this.bot.sendMessage(chatId, `üë§ –ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: "${escapedName}"\n\nüì± –í–≤–µ–¥–∏—Ç–µ username –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ @):`, {
            parse_mode: 'Markdown'
        });
    }

    async handleOperatorUsernameInput(chatId, userId, text, operatorName) {
        const username = text.trim().replace('@', '');

        if (!username || username.length < 3) {
            return this.bot.sendMessage(chatId, `‚ùå Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        if (!/^[a-zA-Z0-9_]+$/.test(username)) {
            return this.bot.sendMessage(chatId, `‚ùå Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Operator = require('./models/Operator');

            const existingOperator = await Operator.findOne({ username: username });
            if (existingOperator) {
                return this.bot.sendMessage(chatId, `‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä —Å username @${username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π username:`);
            }

            const operator = new Operator({
                name: operatorName,
                username: username,
                description: '',
                isActive: true,
                specialization: 'general',
                order: 0
            });

            await operator.save();
            this.adminUtils.clearSession(userId);

            const escapedName = this.escapeMarkdown(operatorName);
            this.bot.sendMessage(chatId, `‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä "${escapedName}" (@${username}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`, {
                parse_mode: 'Markdown'
            });

            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Create operator error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.');
        }
    }

    async handleEditOperatorName(chatId, userId, text, operatorId) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Operator = require('./models/Operator');
            await Operator.findByIdAndUpdate(operatorId, { name: validation.value });

            this.adminUtils.clearSession(userId);
            const escapedName = this.escapeMarkdown(validation.value);
            this.bot.sendMessage(chatId, `‚úÖ –ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${escapedName}"`, {
                parse_mode: 'Markdown'
            });

            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit operator name error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.');
        }
    }

    async handleEditOperatorUsername(chatId, userId, text, operatorId) {
        const username = text.trim().replace('@', '');

        if (!username || username.length < 3) {
            return this.bot.sendMessage(chatId, `‚ùå Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        if (!/^[a-zA-Z0-9_]+$/.test(username)) {
            return this.bot.sendMessage(chatId, `‚ùå Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Operator = require('./models/Operator');

            const existingOperator = await Operator.findOne({
                username: username,
                _id: { $ne: operatorId }
            });

            if (existingOperator) {
                return this.bot.sendMessage(chatId, `‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä —Å username @${username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π username:`);
            }

            await Operator.findByIdAndUpdate(operatorId, { username: username });

            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, `‚úÖ Username –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "@${username}"`, {
                parse_mode: 'Markdown'
            });

            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit operator username error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.');
        }
    }

    // === –£–ü–†–û–©–ï–ù–ù–´–ô –ú–ï–¢–û–î –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –¶–ï–ù–´ ===
    formatPrice(price) {
        return `${new Intl.NumberFormat('cs-CZ').format(price)} Kƒç`;
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try {
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...');
    new RealEstateBot();
} catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
    process.exit(1);
}