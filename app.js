const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const config = require('./config/config');
const Database = require('./database');
const ClientHandler = require('./handler/clientHandler');

// –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
const AdminHandler = require('./handler/adminHandler');
const AdminUtils = require('./utils/adminUtils');
const adminConfig = require('./config/adminConfig');

class RealEstateBot {
    constructor() {
        this.bot = new TelegramBot(config.BOT_TOKEN, { polling: true });
        this.database = new Database();
        this.clientHandler = new ClientHandler(this.bot, this.database);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –º–æ–¥—É–ª–µ–π
        this.adminUtils = new AdminUtils(this.bot);
        this.adminHandler = new AdminHandler(this.bot, adminConfig.getAdminIds());
        
        // –î–µ–ª–∞–µ–º adminUtils –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        global.adminUtils = this.adminUtils;
        
        this.setupHandlers();
        
        // –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π
        this.adminUtils.startSessionCleaner();
    }

    setupHandlers() {
        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.onText(/\/start/, (msg) => {
            this.clientHandler.handleStart(msg);
        });

        // –ö–æ–º–∞–Ω–¥–∞ /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        this.bot.onText(/\/admin/, (msg) => {
            if (!adminConfig.isAdmin(msg.from.id)) {
                return this.bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            }
            this.adminHandler.showAdminMenu(msg.chat.id);
        });

        // üî• –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        this.bot.on('photo', (msg) => {
            console.log('–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from.id);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            if (!adminConfig.isAdmin(msg.from.id)) {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
                return;
            }
            
            // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ AdminHandler
            this.adminHandler.handlePhotoUpload(msg);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        this.bot.on('callback_query', (callbackQuery) => {
            // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∏–π callback –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
            if (adminConfig.isAdmin(callbackQuery.from.id) && 
                callbackQuery.data.startsWith('admin_')) {
                // AdminHandler —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ callback'–∏
                return;
            }
            
            // –û–±—ã—á–Ω—ã–µ callback'–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            this.clientHandler.handleCallback(callbackQuery);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', (msg) => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if (msg.text && msg.text.startsWith('/')) return;
            
            // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
            if (msg.photo) return;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è
            const session = this.adminUtils.getSession(msg.from.id);
            if (session && adminConfig.isAdmin(msg.from.id)) {
                this.handleAdminInput(msg, session);
                return;
            }
            
            // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            this.clientHandler.handleTextMessage(msg);
        });

        console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
        console.log(`üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ${adminConfig.getAdminIds().join(', ')}`);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    async handleAdminInput(msg, session) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;

        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞:', {
            userId,
            sessionType: session.type,
            text: text ? text.substring(0, 50) : 'no text'
        });

        try {
            switch (session.type) {
                case 'adding_category_name':
                    await this.handleCategoryNameInput(chatId, userId, text);
                    break;
                    
                case 'editing_category_name':
                    await this.handleEditCategoryName(chatId, userId, text, session.data.categoryId);
                    break;
                    
                case 'adding_product_name':
                    await this.handleProductNameInput(chatId, userId, text, session.data.categoryId);
                    break;
                    
                case 'adding_product_price':
                    await this.handleNewProductPriceInput(chatId, userId, text, session.data);
                    break;
                    
                case 'editing_product_name':
                    await this.handleEditProductName(chatId, userId, text, session.data.productId);
                    break;
                    
                // üî• –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
                case 'editing_product_description':
                    await this.handleEditProductDescription(chatId, userId, text, session.data.productId);
                    break;
                    
                case 'editing_product_price':
                    await this.handleProductPriceInput(chatId, userId, text, session.data.productId);
                    break;
                    
                case 'adding_operator_name':
                    await this.handleOperatorNameInput(chatId, userId, text);
                    break;
                    
                case 'adding_operator_username':
                    await this.handleOperatorUsernameInput(chatId, userId, text, session.data.operatorName);
                    break;
                    
                case 'editing_operator_name':
                    await this.handleEditOperatorName(chatId, userId, text, session.data.operatorId);
                    break;
                    
                case 'editing_operator_username':
                    await this.handleEditOperatorUsername(chatId, userId, text, session.data.operatorId);
                    break;
                    
                default:
                    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏:', session.type);
                    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏, –æ—á–∏—â–∞–µ–º
                    this.adminUtils.clearSession(userId);
                    this.bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                    break;
            }
        } catch (error) {
            console.error('Admin input error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ô ===

    async handleCategoryNameInput(chatId, userId, text) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Category = require('./models/Category');
            const category = new Category({
                name: validation.value,
                description: '',
                isActive: true,
                order: 0
            });

            await category.save();
            this.adminUtils.clearSession(userId);
            
            this.bot.sendMessage(chatId, `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "*${validation.value}*" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`, {
                parse_mode: 'Markdown'
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –º–µ–Ω—é —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Create category error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        }
    }

    async handleEditCategoryName(chatId, userId, text, categoryId) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Category = require('./models/Category');
            await Category.findByIdAndUpdate(categoryId, { name: validation.value });
            
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "*${validation.value}*"`, {
                parse_mode: 'Markdown'
            });
            
            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit category name error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
        }
    }

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–û–í–ê–†–û–í ===

    async handleProductNameInput(chatId, userId, text, categoryId) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        // –¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã
        this.adminUtils.createSession(userId, 'adding_product_price', {
            categoryId: categoryId,
            productName: validation.value
        });

        this.bot.sendMessage(chatId, `üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: "*${validation.value}*"\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –∫—Ä–æ–Ω–∞—Ö:`, {
            parse_mode: 'Markdown'
        });
    }

    async handleNewProductPriceInput(chatId, userId, text, sessionData) {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
        const priceValue = parseInt(text.replace(/\D/g, ''));
        
        if (isNaN(priceValue) || priceValue <= 0) {
            return this.bot.sendMessage(chatId, `‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞):\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Property = require('./models/Property');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ CZK, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏
            const priceCZK = priceValue;
            const priceRUB = Math.round(priceValue * 2.5); // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CZK –≤ RUB

            const product = new Property({
                categoryId: sessionData.categoryId,
                name: sessionData.productName,
                description: '',
                price: priceRUB,
                priceInCZK: priceCZK,
                currency: 'CZK', // –í—Å–µ–≥–¥–∞ CZK
                specifications: {},
                isAvailable: true,
                order: 0,
                photos: [] // üî• –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            });

            await product.save();
            this.adminUtils.clearSession(userId);
            
            this.bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "*${sessionData.productName}*" —Å–æ–∑–¥–∞–Ω!\n\nüí∞ –¶–µ–Ω–∞: ${this.formatPrice(priceCZK, 'CZK')}\n\nüì∑ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.`, {
                parse_mode: 'Markdown'
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –º–µ–Ω—é —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Create product error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.');
        }
    }

    async handleEditProductName(chatId, userId, text, productId) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Property = require('./models/Property');
            await Property.findByIdAndUpdate(productId, { name: validation.value });
            
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "*${validation.value}*"`, {
                parse_mode: 'Markdown'
            });
            
            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit product name error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.');
        }
    }

    // üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    async handleEditProductDescription(chatId, userId, text, productId) {
        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', { userId, productId });
        
        const validation = this.adminUtils.validateDescription(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Property = require('./models/Property');
            await Property.findByIdAndUpdate(productId, { description: validation.value });
            
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
            
            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit product description error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.');
        }
    }

    async handleProductPriceInput(chatId, userId, text, productId) {
        // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É —Å –≤–∞–ª—é—Ç–æ–π
        const priceData = this.parsePriceWithCurrency(text);
        
        if (!priceData.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${priceData.error}\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 5000000 (—Ä—É–±–ª–∏)\n‚Ä¢ 5000000 RUB\n‚Ä¢ 2000000 CZK\n‚Ä¢ 2000000 –∫—Ä–æ–Ω\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Property = require('./models/Property');
            const product = await Property.findById(productId);
            
            if (!product) {
                this.adminUtils.clearSession(userId);
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
            let updateData = {};
            
            if (priceData.currency === 'CZK') {
                updateData.priceInCZK = priceData.value;
                updateData.price = Math.round(priceData.value * 2.5); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å CZK –∫ RUB
                updateData.currency = 'CZK';
            } else {
                updateData.price = priceData.value;
                updateData.priceInCZK = Math.round(priceData.value / 2.5); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å RUB –∫ CZK
                updateData.currency = 'RUB';
            }

            await Property.findByIdAndUpdate(productId, updateData);
            
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, `‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\nüí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞:\n‚Ä¢ ${this.formatPrice(updateData.price, 'RUB')}\n‚Ä¢ ${this.formatPrice(updateData.priceInCZK, 'CZK')}\n\nüéØ –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞: ${priceData.currency}`, {
                parse_mode: 'Markdown'
            });
            
            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit product price error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞.');
        }
    }

    // === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–ê–õ–Æ–¢–ê–ú–ò ===

    parsePriceWithCurrency(text) {
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        const input = text.trim().toLowerCase();
        
        // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const patterns = [
            /^(\d+(?:\.\d+)?)\s*(czk|—á–µ—à|–∫—Ä–æ–Ω|–∫—á–∫|kƒç)$/i,  // CZK
            /^(\d+(?:\.\d+)?)\s*(rub|—Ä—É–±|—Ä—É–±–ª)$/i,       // RUB
            /^(\d+(?:\.\d+)?)$/                          // –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB)
        ];

        for (const pattern of patterns) {
            const match = input.match(pattern);
            if (match) {
                const value = parseFloat(match[1]);
                let currency = 'RUB'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

                if (match[2]) {
                    const currencyStr = match[2].toLowerCase();
                    if (currencyStr.includes('czk') || currencyStr.includes('—á–µ—à') || 
                        currencyStr.includes('–∫—Ä–æ–Ω') || currencyStr.includes('–∫—á–∫') || 
                        currencyStr.includes('kƒç')) {
                        currency = 'CZK';
                    }
                }

                // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
                if (isNaN(value) || value <= 0) {
                    return { valid: false, error: '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' };
                }

                if (currency === 'CZK' && value < 50000) {
                    return { valid: false, error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 50,000 Kƒç' };
                }

                if (currency === 'RUB' && value < 100000) {
                    return { valid: false, error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 100,000 ‚ÇΩ' };
                }

                if (value > 500000000) {
                    return { valid: false, error: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 500,000,000' };
                }

                return { valid: true, value: Math.round(value), currency };
            }
        }

        return { 
            valid: false, 
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: "—Ü–µ–Ω–∞ –≤–∞–ª—é—Ç–∞" (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000000 CZK –∏–ª–∏ 5000000 RUB)' 
        };
    }

    formatPrice(price, currency) {
        const formatted = new Intl.NumberFormat('ru-RU').format(price);
        
        switch (currency) {
            case 'CZK':
                return `${formatted} Kƒç`;
            case 'RUB':
                return `${formatted} ‚ÇΩ`;
            default:
                return `${formatted} ${currency}`;
        }
    }
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–ü–ï–†–ê–¢–û–†–û–í ===

    async handleOperatorNameInput(chatId, userId, text) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        // –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É username
        this.adminUtils.createSession(userId, 'adding_operator_username', {
            operatorName: validation.value
        });

        this.bot.sendMessage(chatId, `üë§ –ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: "*${validation.value}*"\n\nüì± –í–≤–µ–¥–∏—Ç–µ username –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ @):`, {
            parse_mode: 'Markdown'
        });
    }

    async handleOperatorUsernameInput(chatId, userId, text, operatorName) {
        // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º username
        const username = text.trim().replace('@', '');
        
        if (!username || username.length < 3) {
            return this.bot.sendMessage(chatId, `‚ùå Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        if (!/^[a-zA-Z0-9_]+$/.test(username)) {
            return this.bot.sendMessage(chatId, `‚ùå Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Operator = require('./models/Operator');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π username
            const existingOperator = await Operator.findOne({ username: username });
            if (existingOperator) {
                return this.bot.sendMessage(chatId, `‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä —Å username @${username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π username:`);
            }

            const operator = new Operator({
                name: operatorName,
                username: username,
                description: '',
                isActive: true,
                specialization: 'general',
                order: 0
            });

            await operator.save();
            this.adminUtils.clearSession(userId);
            
            this.bot.sendMessage(chatId, `‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä "*${operatorName}*" (@${username}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`, {
                parse_mode: 'Markdown'
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –º–µ–Ω—é —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Create operator error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.');
        }
    }

    async handleEditOperatorName(chatId, userId, text, operatorId) {
        const validation = this.adminUtils.validateName(text);
        if (!validation.valid) {
            return this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Operator = require('./models/Operator');
            await Operator.findByIdAndUpdate(operatorId, { name: validation.value });
            
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, `‚úÖ –ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "*${validation.value}*"`, {
                parse_mode: 'Markdown'
            });
            
            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit operator name error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.');
        }
    }

    async handleEditOperatorUsername(chatId, userId, text, operatorId) {
        // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º username
        const username = text.trim().replace('@', '');
        
        if (!username || username.length < 3) {
            return this.bot.sendMessage(chatId, `‚ùå Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        if (!/^[a-zA-Z0-9_]+$/.test(username)) {
            return this.bot.sendMessage(chatId, `‚ùå Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
        }

        try {
            const Operator = require('./models/Operator');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π username (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
            const existingOperator = await Operator.findOne({ 
                username: username, 
                _id: { $ne: operatorId } 
            });
            
            if (existingOperator) {
                return this.bot.sendMessage(chatId, `‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä —Å username @${username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π username:`);
            }

            await Operator.findByIdAndUpdate(operatorId, { username: username });
            
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, `‚úÖ Username –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "*@${username}*"`, {
                parse_mode: 'Markdown'
            });
            
            setTimeout(() => this.adminHandler.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Edit operator username error:', error);
            this.adminUtils.clearSession(userId);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.');
        }
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
new RealEstateBot();