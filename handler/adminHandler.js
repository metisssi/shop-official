const Category = require('../models/Category');
const Property = require('../models/Property');
const Operator = require('../models/Operator');

class AdminHandler {
    constructor(bot, adminIds = []) {
        this.bot = bot;
        this.adminIds = adminIds;
        this.setupAdminCommands();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    isAdmin(userId) {
        return this.adminIds.includes(userId);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
    escapeMarkdown(text) {
        if (!text) return '';
        return text.replace(/[_*[\]()~`>#+\-=|{}.!\\]/g, '\\$&');
    }

    setupAdminCommands() {
        // –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é
        this.bot.onText(/\/admin/, (msg) => {
            if (!this.isAdmin(msg.from.id)) {
                return this.bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            }
            this.showAdminMenu(msg.chat.id);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        this.bot.on('callback_query', (query) => {
            if (!this.isAdmin(query.from.id)) return;
            this.handleAdminCallback(query);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    async handlePhotoUpload(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        try {
            console.log('–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

            const session = global.adminUtils?.getSession(userId);
            console.log('–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:', session);

            if (!session || session.type !== 'uploading_product_photo') {
                console.log('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø');
                return this.bot.sendMessage(chatId,
                    '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /admin');
            }

            const { productId } = session.data;
            console.log('ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–µ—Å—Å–∏–∏:', productId);

            const product = await Property.findById(productId);

            if (!product) {
                global.adminUtils.clearSession(userId);
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const photo = msg.photo[msg.photo.length - 1];

            const photoData = {
                fileId: photo.file_id,
                fileName: `photo_${Date.now()}.jpg`,
                fileSize: photo.file_size,
                uploadedBy: userId,
                uploadedAt: new Date()
            };

            console.log('–î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:', photoData);

            await product.addPhoto(photoData);
            global.adminUtils.clearSession(userId);

            const updatedProduct = await Property.findById(productId);
            const escapedName = this.escapeMarkdown(product.name);

            this.bot.sendMessage(chatId,
                `‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Ç–æ–≤–∞—Ä—É "${escapedName}"!\n\nüì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${updatedProduct.photos.length}`,
                { parse_mode: 'Markdown' }
            );

            setTimeout(() => {
                this.manageProductPhotos(chatId, null, productId);
            }, 1000);

        } catch (error) {
            console.error('Photo upload error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
        }
    }

    // –í —Ñ–∞–π–ª–µ handler/adminHandler.js –∑–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ showAdminMenu –Ω–∞ —ç—Ç–æ—Ç:

    showAdminMenu(chatId, messageId = null) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏', callback_data: 'admin_categories' },
                    { text: 'üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏', callback_data: 'admin_products' }
                ],
                [
                    { text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏', callback_data: 'admin_operators' },
                    { text: 'üìã –ó–∞–∫–∞–∑—ã', callback_data: 'admin_orders' }
                ],
                [
                    { text: 'üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏', callback_data: 'admin_admins_management' },
                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
                ]
            ]
        };

        const text = 'üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:';

        // –ï—Å–ª–∏ –µ—Å—Ç—å messageId - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if (messageId) {
            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: keyboard
            }).catch(error => {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ:', error.message);
                // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                this.bot.sendMessage(chatId, text, {
                    reply_markup: keyboard
                });
            });
        } else {
            this.bot.sendMessage(chatId, text, {
                reply_markup: keyboard
            });
        }
    }

    // –í —Ñ–∞–π–ª–µ handler/adminHandler.js –≤ –º–µ—Ç–æ–¥–µ handleAdminCallback –Ω–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ:

    async handleAdminCallback(query) {
        const data = query.data;
        const chatId = query.message.chat.id;
        const messageId = query.message.message_id;

        try {
            switch (data) {
                case 'admin_categories':
                    await this.showCategoriesMenu(chatId, messageId);
                    break;
                case 'admin_products':
                    await this.showProductsMenu(chatId, messageId);
                    break;
                case 'admin_operators':
                    await this.showOperatorsMenu(chatId, messageId);
                    break;
                case 'admin_menu':
                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º messageId –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await this.showAdminMenu(chatId, messageId);
                    break;
                case 'admin_admins_management':
                    await this.showAdminsManagement(chatId, messageId);
                    break;
                case 'admin_add_admin':
                    await this.startAddAdmin(chatId);
                    break;
                case 'admin_list_admins':
                    await this.showAdminsList(chatId, messageId);
                    break;

                // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ case'—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            }
        } catch (error) {
            console.error('Admin callback error:', error);
            this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }

        this.bot.answerCallbackQuery(query.id);
    }


    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ===

    showCategoriesMenu(chatId, messageId) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: 'category_add' },
                    { text: 'üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', callback_data: 'category_list' }
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data: 'admin_menu' }]
            ]
        };

        this.bot.editMessageText('üìÇ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async showCategoriesList(chatId, messageId) {
        try {
            const categories = await Category.find().sort({ order: 1, name: 1 });

            if (categories.length === 0) {
                return this.bot.editMessageText('üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_categories' }
                        ]]
                    }
                });
            }

            let text = 'üìÇ *–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*\n\n';
            const keyboard = [];

            categories.forEach((category, index) => {
                const status = category.isActive ? '‚úÖ' : '‚ùå';
                const escapedName = this.escapeMarkdown(category.name);
                text += `${index + 1}\\. ${status} *${escapedName}*\n\n`;

                keyboard.push([
                    { text: `‚úèÔ∏è ${category.name}`, callback_data: `edit_category_${category._id}` },
                    { text: `üóë –£–¥–∞–ª–∏—Ç—å`, callback_data: `delete_category_${category._id}` }
                ]);
            });

            keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_categories' }]);

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: keyboard }
            });
        } catch (error) {
            console.error('Show categories list error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        }
    }

    async startAddCategory(chatId) {
        if (global.adminUtils) {
            global.adminUtils.createSession(chatId, 'adding_category_name', {});
        }

        this.bot.sendMessage(chatId, '‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', {
            parse_mode: 'Markdown'
        });
    }

    async editCategory(chatId, messageId, categoryId) {
        try {
            const category = await Category.findById(categoryId);
            if (!category) {
                return this.bot.sendMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const status = category.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
            const escapedName = this.escapeMarkdown(category.name);
            const text = `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n` +
                `üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${escapedName}\n` +
                `üìä *–°—Ç–∞—Ç—É—Å:* ${status}`;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_cat_name_${categoryId}` }
                    ],
                    [
                        { text: category.isActive ? '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data: `toggle_cat_${categoryId}` }
                    ],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'category_list' }]
                ]
            };

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('Edit category error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }
    }

    async deleteCategory(chatId, messageId, categoryId) {
        try {
            const category = await Category.findById(categoryId);
            if (!category) {
                return this.bot.sendMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const propertiesCount = await Property.countDocuments({ categoryId });
            const escapedName = this.escapeMarkdown(category.name);

            let text = `üóë *–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n` +
                `üìù *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${escapedName}\n`;

            if (propertiesCount > 0) {
                text += `‚ö†Ô∏è *–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${propertiesCount} —Ç–æ–≤–∞—Ä–æ–≤*\n\n` +
                    `–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã!\n\n` +
                    `–í—ã —É–≤–µ—Ä–µ–Ω—ã?`;
            } else {
                text += `\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?`;
            }

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_cat_${categoryId}` },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'category_list' }
                    ]
                ]
            };

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('Delete category error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }
    }

    async startEditCategoryName(chatId, categoryId) {
        const category = await Category.findById(categoryId);
        if (!category) {
            return this.bot.sendMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        if (global.adminUtils) {
            global.adminUtils.createSession(chatId, 'editing_category_name', { categoryId });
        }

        const escapedName = this.escapeMarkdown(category.name);
        this.bot.sendMessage(chatId,
            `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *${escapedName}*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`,
            { parse_mode: 'Markdown' }
        );
    }

    async toggleCategoryStatus(chatId, messageId, categoryId) {
        try {
            const category = await Category.findById(categoryId);
            if (!category) {
                return this.bot.sendMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            category.isActive = !category.isActive;
            await category.save();

            const status = category.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞';
            const escapedName = this.escapeMarkdown(category.name);
            this.bot.sendMessage(chatId, `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${escapedName}" ${status}!`);

            setTimeout(() => this.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Toggle category status error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }
    }

    async confirmDeleteCategory(chatId, messageId, categoryId) {
        try {
            const category = await Category.findById(categoryId);
            if (!category) {
                return this.bot.sendMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            await Property.deleteMany({ categoryId });
            await Category.findByIdAndDelete(categoryId);

            const escapedName = this.escapeMarkdown(category.name);
            this.bot.editMessageText(
                `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${escapedName}" –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã!`,
                { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown' }
            );

            setTimeout(() => this.showAdminMenu(chatId), 2000);
        } catch (error) {
            console.error('Confirm delete category error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò ===

    showProductsMenu(chatId, messageId) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'product_add' },
                    { text: 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'product_list' }
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data: 'admin_menu' }]
            ]
        };

        this.bot.editMessageText('üè† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async selectCategoryForProduct(chatId, messageId) {
        try {
            const categories = await Category.find({ isActive: true }).sort({ order: 1, name: 1 });

            if (categories.length === 0) {
                return this.bot.editMessageText('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π!\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_products' }
                        ]]
                    }
                });
            }

            let text = '‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:';
            const keyboard = [];

            categories.forEach(category => {
                keyboard.push([{
                    text: `üìÇ ${category.name}`,
                    callback_data: `add_product_to_${category._id}`
                }]);
            });

            keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_products' }]);

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: keyboard }
            });
        } catch (error) {
            console.error('Select category for product error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        }
    }

    async startAddProduct(chatId, categoryId) {
        try {
            const category = await Category.findById(categoryId);
            if (!category) {
                return this.bot.sendMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            if (global.adminUtils) {
                global.adminUtils.createSession(chatId, 'adding_product_name', { categoryId });
            }

            const escapedName = this.escapeMarkdown(category.name);
            this.bot.sendMessage(chatId,
                `‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${escapedName}"*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`,
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('Start add product error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
        }
    }

    async showProductsList(chatId, messageId) {
        try {
            const products = await Property.find()
                .populate('categoryId')
                .sort({ order: 1, name: 1 });

            if (products.length === 0) {
                return this.bot.editMessageText('üè† *–¢–æ–≤–∞—Ä—ã*\n\n‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_products' }
                        ]]
                    }
                });
            }

            let text = 'üè† *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n\n';
            const keyboard = [];

            products.forEach((product, index) => {
                const status = product.isAvailable ? '‚úÖ' : '‚ùå';
                const categoryName = product.categoryId ? product.categoryId.name : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
                const photoIcon = product.photosCount > 0 ? `üì∏${product.photosCount}` : 'üì∑';

                const escapedName = this.escapeMarkdown(product.name);
                const escapedCategory = this.escapeMarkdown(categoryName);

                text += `${index + 1}\\. ${status} ${photoIcon} *${escapedName}*\n`;
                text += `   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${escapedCategory}\n`;

                if (product.priceInCZK) {
                    text += `   üí∞ –¶–µ–Ω–∞: ${product.priceInCZK.toLocaleString('cs-CZ')} Kƒç\n\n`;
                } else {
                    text += `   üí∞ –¶–µ–Ω–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n\n`;
                }

                keyboard.push([
                    { text: `‚úèÔ∏è ${product.name}`, callback_data: `edit_product_${product._id}` },
                    { text: `üóë –£–¥–∞–ª–∏—Ç—å`, callback_data: `delete_product_${product._id}` }
                ]);
            });

            keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_products' }]);

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: keyboard }
            });
        } catch (error) {
            console.error('Show products list error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤');
        }
    }

    async editProduct(chatId, messageId, productId) {
        try {
            const product = await Property.findById(productId).populate('categoryId');
            if (!product) {
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const status = product.isAvailable ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            const categoryName = product.categoryId ? product.categoryId.name : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
            const price = product.priceInCZK ? `${product.priceInCZK.toLocaleString('cs-CZ')} Kƒç` : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            const photosInfo = product.photosCount > 0 ? `üì∏ ${product.photosCount} —Ñ–æ—Ç–æ` : 'üì∑ –ù–µ—Ç —Ñ–æ—Ç–æ';

            const escapedName = this.escapeMarkdown(product.name);
            const escapedCategory = this.escapeMarkdown(categoryName);
            const escapedDescription = this.escapeMarkdown(product.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');

            const text = `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*\n\n` +
                `üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${escapedName}\n` +
                `üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${escapedCategory}\n` +
                `üí∞ *–¶–µ–Ω–∞:* ${price}\n` +
                `üì∑ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:* ${photosInfo}\n` +
                `üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapedDescription}\n` +
                `üìä *–°—Ç–∞—Ç—É—Å:* ${status}`;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_prod_name_${productId}` },
                        { text: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_prod_desc_${productId}` }
                    ],
                    [
                        { text: 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É', callback_data: `edit_prod_price_${productId}` },
                        { text: 'üì∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ', callback_data: `manage_prod_photos_${productId}` }
                    ],
                    [
                        { text: product.isAvailable ? '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data: `toggle_prod_${productId}` }
                    ],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'product_list' }]
                ]
            };

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('Edit product error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞');
        }
    }

    async manageProductPhotos(chatId, messageId, productId) {
        try {
            const product = await Property.findById(productId);
            if (!product) {
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const escapedName = this.escapeMarkdown(product.name);
            let text = `üì∑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏*\n\n`;
            text += `üè† *–¢–æ–≤–∞—Ä:* ${escapedName}\n`;
            text += `üì∏ *–í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:* ${product.photosCount}\n\n`;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `add_prod_photo_${productId}` }
                    ]
                ]
            };

            if (product.photosCount > 0) {
                keyboard.inline_keyboard.push([
                    { text: 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ', callback_data: `view_prod_photos_${productId}` }
                ]);
            }

            keyboard.inline_keyboard.push([
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `edit_product_${productId}` }
            ]);

            if (messageId) {
                this.bot.editMessageText(text, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            } else {
                this.bot.sendMessage(chatId, text, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }
        } catch (error) {
            console.error('Manage product photos error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏');
        }
    }

    async startAddProductPhoto(chatId, productId) {
        try {
            const product = await Property.findById(productId);
            if (!product) {
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            console.log('–°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', chatId, '—Ç–æ–≤–∞—Ä:', productId);

            if (global.adminUtils) {
                global.adminUtils.createSession(chatId, 'uploading_product_photo', { productId });
                console.log('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } else {
                console.error('global.adminUtils –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                return this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }

            const escapedName = this.escapeMarkdown(product.name);

            this.bot.sendMessage(chatId,
                `üì∑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏*\n\nüè† –¢–æ–≤–∞—Ä: *${escapedName}*\n\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é \\(–ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é\\):`,
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('Start add product photo error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
        }
    }

    async viewProductPhotos(chatId, messageId, productId) {
        try {
            const product = await Property.findById(productId);
            if (!product) {
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            if (product.photosCount === 0) {
                const escapedName = this.escapeMarkdown(product.name);
                return this.bot.editMessageText(
                    `üì∑ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞*\n\nüè† *–¢–æ–≤–∞—Ä:* ${escapedName}\n\n‚ùå –£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`,
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [[
                                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `manage_prod_photos_${productId}` }
                            ]]
                        }
                    }
                );
            }

            const escapedName = this.escapeMarkdown(product.name);
            let text = `üì∑ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞*\n\nüè† *–¢–æ–≤–∞—Ä:* ${escapedName}\nüì∏ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${product.photosCount}\n\n`;

            const keyboard = [];

            product.photos.forEach((photo, index) => {
                const isMain = photo.isMain ? '‚≠ê ' : '';
                const photoRow = [];

                photoRow.push({
                    text: `${isMain}üì∏ ${index + 1}`,
                    callback_data: `current_page`
                });

                if (!photo.isMain) {
                    photoRow.push({
                        text: '‚≠ê –°–¥–µ–ª–∞—Ç—å –≥–ª–∞–≤–Ω–æ–π',
                        callback_data: `set_main_photo_${productId}_${index}`
                    });
                }

                photoRow.push({
                    text: 'üóë',
                    callback_data: `delete_photo_${productId}_${index}`
                });

                keyboard.push(photoRow);
            });

            keyboard.push([
                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `add_prod_photo_${productId}` },
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `manage_prod_photos_${productId}` }
            ]);

            if (product.mainPhoto) {
                await this.bot.sendPhoto(chatId, product.mainPhoto.fileId, {
                    caption: text,
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: keyboard }
                });

                try {
                    await this.bot.deleteMessage(chatId, messageId);
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                }
            } else {
                this.bot.editMessageText(text, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: keyboard }
                });
            }

        } catch (error) {
            console.error('View product photos error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
        }
    }

    async setMainPhoto(chatId, messageId, productId, photoIndex) {
        try {
            const product = await Property.findById(productId);
            if (!product) {
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            await product.setMainPhoto(photoIndex);

            this.bot.sendMessage(chatId, '‚úÖ –ì–ª–∞–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');

            setTimeout(() => this.viewProductPhotos(chatId, messageId, productId), 1000);

        } catch (error) {
            console.error('Set main photo error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–ª–∞–≤–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
        }
    }

    async deletePhoto(chatId, messageId, productId, photoIndex) {
        try {
            const product = await Property.findById(productId);
            if (!product) {
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            await product.removePhoto(photoIndex);

            this.bot.sendMessage(chatId, '‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞!');

            setTimeout(() => this.viewProductPhotos(chatId, messageId, productId), 1000);

        } catch (error) {
            console.error('Delete photo error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
        }
    }

    async startEditProductName(chatId, productId) {
        const product = await Property.findById(productId);
        if (!product) {
            return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (global.adminUtils) {
            global.adminUtils.createSession(chatId, 'editing_product_name', { productId });
        }

        const escapedName = this.escapeMarkdown(product.name);
        this.bot.sendMessage(chatId,
            `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞*\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *${escapedName}*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`,
            { parse_mode: 'Markdown' }
        );
    }

    async startEditProductDescription(chatId, productId) {
        try {
            const product = await Property.findById(productId);
            if (!product) {
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            if (global.adminUtils) {
                global.adminUtils.createSession(chatId, 'editing_product_description', { productId });
            }

            const currentDesc = product.description || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
            const escapedDesc = this.escapeMarkdown(currentDesc);
            const escapedName = this.escapeMarkdown(product.name);

            this.bot.sendMessage(chatId,
                `üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞*\n\n–¢–æ–≤–∞—Ä: *${escapedName}*\n\n–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${escapedDesc}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:`,
                { parse_mode: 'Markdown' }
            );
        } catch (error) {
            console.error('Start edit product description error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è');
        }
    }

    async startEditProductPrice(chatId, productId) {
        const product = await Property.findById(productId);
        if (!product) {
            return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (global.adminUtils) {
            global.adminUtils.createSession(chatId, 'editing_product_price', { productId });
        }

        const currentPrice = product.priceInCZK ?
            `${product.priceInCZK.toLocaleString('cs-CZ')} Kƒç` :
            `${product.price.toLocaleString('ru-RU')} ‚ÇΩ`;

        this.bot.sendMessage(chatId,
            `üí∞ *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞*\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${currentPrice}*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Å –≤–∞–ª—é—Ç–æ–π:\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 5000000 (—Ä—É–±–ª–∏)\n‚Ä¢ 5000000 RUB\n‚Ä¢ 2000000 CZK\n‚Ä¢ 2000000 –∫—Ä–æ–Ω`,
            { parse_mode: 'Markdown' }
        );
    }

    async toggleProductStatus(chatId, messageId, productId) {
        try {
            const product = await Property.findById(productId);
            if (!product) {
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            product.isAvailable = !product.isAvailable;
            await product.save();

            const status = product.isAvailable ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
            const escapedName = this.escapeMarkdown(product.name);
            this.bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "${escapedName}" ${status}!`);

            setTimeout(() => this.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Toggle product status error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞');
        }
    }

    async deleteProduct(chatId, messageId, productId) {
        try {
            const product = await Property.findById(productId);
            if (!product) {
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const price = product.priceInCZK ? `${product.priceInCZK.toLocaleString('cs-CZ')} Kƒç` : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            const photosInfo = product.photosCount > 0 ? `\nüì∏ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:* ${product.photosCount}` : '';
            const escapedName = this.escapeMarkdown(product.name);

            const text = `üóë *–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*\n\n` +
                `üìù *–¢–æ–≤–∞—Ä:* ${escapedName}\n` +
                `üí∞ *–¶–µ–Ω–∞:* ${price}${photosInfo}\n\n` +
                `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?`;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_prod_${productId}` },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'product_list' }
                    ]
                ]
            };

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('Delete product error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
        }
    }

    async confirmDeleteProduct(chatId, messageId, productId) {
        try {
            const product = await Property.findById(productId);
            if (!product) {
                return this.bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            await Property.findByIdAndDelete(productId);

            const escapedName = this.escapeMarkdown(product.name);
            this.bot.editMessageText(
                `‚úÖ –¢–æ–≤–∞—Ä "${escapedName}" —É–¥–∞–ª–µ–Ω!`,
                { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown' }
            );

            setTimeout(() => this.showAdminMenu(chatId), 2000);
        } catch (error) {
            console.error('Confirm delete product error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¢–û–†–ê–ú–ò ===

    showOperatorsMenu(chatId, messageId) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', callback_data: 'operator_add' },
                    { text: 'üìã –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤', callback_data: 'operator_list' }
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data: 'admin_menu' }]
            ]
        };

        this.bot.editMessageText('üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async showOperatorsList(chatId, messageId) {
        try {
            const operators = await Operator.find().sort({ order: 1, name: 1 });

            if (operators.length === 0) {
                return this.bot.editMessageText('üë• *–û–ø–µ—Ä–∞—Ç–æ—Ä—ã*\n\n‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_operators' }
                        ]]
                    }
                });
            }

            let text = 'üë• *–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n';
            const keyboard = [];

            operators.forEach((operator, index) => {
                const status = operator.isActive ? '‚úÖ' : '‚ùå';
                const specialization = {
                    general: '–û–±—â–∏–π',
                    premium: '–ü—Ä–µ–º–∏—É–º',
                    commercial: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è',
                    residential: '–ñ–∏–ª–∞—è'
                };

                const escapedName = this.escapeMarkdown(operator.name);

                text += `${index + 1}\\. ${status} *${escapedName}*\n`;
                text += `   üì± ${operator.formattedUsername}\n`;
                text += `   üè∑ ${specialization[operator.specialization]}\n\n`;

                keyboard.push([
                    { text: `‚úèÔ∏è ${operator.name}`, callback_data: `edit_operator_${operator._id}` },
                    { text: `üóë –£–¥–∞–ª–∏—Ç—å`, callback_data: `delete_operator_${operator._id}` }
                ]);
            });

            keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_operators' }]);

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: keyboard }
            });
        } catch (error) {
            console.error('Show operators list error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤');
        }
    }

    async startAddOperator(chatId) {
        if (global.adminUtils) {
            global.adminUtils.createSession(chatId, 'adding_operator_name', {});
        }

        this.bot.sendMessage(chatId, '‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', {
            parse_mode: 'Markdown'
        });
    }

    async editOperator(chatId, messageId, operatorId) {
        try {
            const operator = await Operator.findById(operatorId);
            if (!operator) {
                return this.bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const status = operator.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
            const specialization = {
                general: '–û–±—â–∏–π',
                premium: '–ü—Ä–µ–º–∏—É–º',
                commercial: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è',
                residential: '–ñ–∏–ª–∞—è'
            };

            const escapedName = this.escapeMarkdown(operator.name);

            const text = `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*\n\n` +
                `üë§ *–ò–º—è:* ${escapedName}\n` +
                `üì± *Username:* ${operator.formattedUsername}\n` +
                `üè∑ *–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:* ${specialization[operator.specialization]}\n` +
                `üìä *–°—Ç–∞—Ç—É—Å:* ${status}`;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data: `edit_op_name_${operatorId}` }
                    ],
                    [
                        { text: 'üì± –ò–∑–º–µ–Ω–∏—Ç—å username', callback_data: `edit_op_username_${operatorId}` }
                    ],
                    [
                        { text: operator.isActive ? '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data: `toggle_op_${operatorId}` }
                    ],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'operator_list' }]
                ]
            };

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('Edit operator error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
        }
    }

    async deleteOperator(chatId, messageId, operatorId) {
        try {
            const operator = await Operator.findById(operatorId);
            if (!operator) {
                return this.bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const escapedName = this.escapeMarkdown(operator.name);

            const text = `üóë *–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*\n\n` +
                `üë§ *–û–ø–µ—Ä–∞—Ç–æ—Ä:* ${escapedName}\n` +
                `üì± *Username:* ${operator.formattedUsername}\n\n` +
                `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?`;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_op_${operatorId}` },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'operator_list' }
                    ]
                ]
            };

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('Delete operator error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
        }
    }

    async startEditOperatorName(chatId, operatorId) {
        const operator = await Operator.findById(operatorId);
        if (!operator) {
            return this.bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (global.adminUtils) {
            global.adminUtils.createSession(chatId, 'editing_operator_name', { operatorId });
        }

        const escapedName = this.escapeMarkdown(operator.name);
        this.bot.sendMessage(chatId,
            `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*\n\n–¢–µ–∫—É—â–µ–µ –∏–º—è: *${escapedName}*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:`,
            { parse_mode: 'Markdown' }
        );
    }

    async startEditOperatorUsername(chatId, operatorId) {
        const operator = await Operator.findById(operatorId);
        if (!operator) {
            return this.bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (global.adminUtils) {
            global.adminUtils.createSession(chatId, 'editing_operator_username', { operatorId });
        }

        this.bot.sendMessage(chatId,
            `üì± *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ username –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞*\n\n–¢–µ–∫—É—â–∏–π username: *${operator.formattedUsername}*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π username (–±–µ–∑ @):`,
            { parse_mode: 'Markdown' }
        );
    }

    async toggleOperatorStatus(chatId, messageId, operatorId) {
        try {
            const operator = await Operator.findById(operatorId);
            if (!operator) {
                return this.bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            operator.isActive = !operator.isActive;
            await operator.save();

            const status = operator.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
            const escapedName = this.escapeMarkdown(operator.name);
            this.bot.sendMessage(chatId, `‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä "${escapedName}" ${status}!`);

            setTimeout(() => this.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Toggle operator status error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
        }
    }

    async confirmDeleteOperator(chatId, messageId, operatorId) {
        try {
            const operator = await Operator.findById(operatorId);
            if (!operator) {
                return this.bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            await Operator.findByIdAndDelete(operatorId);

            const escapedName = this.escapeMarkdown(operator.name);
            this.bot.editMessageText(
                `‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä "${escapedName}" —É–¥–∞–ª–µ–Ω!`,
                { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown' }
            );

            setTimeout(() => this.showAdminMenu(chatId), 2000);
        } catch (error) {
            console.error('Confirm delete operator error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
        }
    }

    // –í —Ñ–∞–π–ª–µ handler/adminHandler.js –∑–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ showAdminsManagement –Ω–∞ —ç—Ç–æ—Ç:

    async showAdminsManagement(chatId, messageId) {
        console.log('üîß –ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', chatId);

        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data: 'admin_add_admin' },
                    { text: 'üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', callback_data: 'admin_list_admins' }
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data: 'admin_menu' }]
            ]
        };

        const text = 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

        try {
            if (messageId) {
                await this.bot.editMessageText(text, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: keyboard
                });
            } else {
                await this.bot.sendMessage(chatId, text, {
                    reply_markup: keyboard
                });
            }
            console.log('‚úÖ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∞–¥–º–∏–Ω–æ–≤:', error);
            // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            this.bot.sendMessage(chatId, text, {
                reply_markup: keyboard
            });
        }
    }
    // –í —Ñ–∞–π–ª–µ handler/adminHandler.js –∑–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ showAdminsList –Ω–∞ —ç—Ç–æ—Ç:

    async showAdminsList(chatId, messageId) {
        try {
            const adminConfig = require('../config/adminConfig');
            const adminsList = adminConfig.getAdminsList();

            let text = 'üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n';

            adminsList.forEach((admin, index) => {
                const status = admin.isSuperAdmin ? 'üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω' : 'üë§ –ê–¥–º–∏–Ω';
                text += `${index + 1}. ${status}\n`;
                text += `   üÜî ID: ${admin.id}\n\n`; // –£–±–∏—Ä–∞–µ–º backticks –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
            });

            const keyboard = {
                inline_keyboard: []
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
            adminsList.forEach(admin => {
                if (!admin.isSuperAdmin) {
                    keyboard.inline_keyboard.push([{
                        text: `üóë –£–¥–∞–ª–∏—Ç—å ${admin.id}`,
                        callback_data: `admin_remove_admin_${admin.id}`
                    }]);
                }
            });

            keyboard.inline_keyboard.push([
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_admins_management' }
            ]);

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                // –£–±–∏—Ä–∞–µ–º parse_mode –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('Show admins list error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤');
        }
    }

    // –í —Ñ–∞–π–ª–µ handler/adminHandler.js –∑–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ startAddAdmin –Ω–∞ —ç—Ç–æ—Ç:

    async startAddAdmin(chatId) {
        console.log('üîß –ó–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', chatId);

        if (global.adminUtils) {
            global.adminUtils.createSession(chatId, 'adding_admin_id', {});
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢ –ë–ï–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –°–ò–ú–í–û–õ–û–í
        const text = `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:

–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID:
‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @getmyid_bot

–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã ID:`;

        this.bot.sendMessage(chatId, text, {
            // –£–±–∏—Ä–∞–µ–º parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å Markdown
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_admins_management' }]
                ]
            }
        }).then(() => {
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        }).catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
        });
    }

    async confirmRemoveAdmin(chatId, messageId, adminId) {
        const adminConfig = require('../config/adminConfig');

        if (adminConfig.isSuperAdmin(parseInt(adminId))) {
            return this.bot.editMessageText('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [[
                        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_list_admins' }
                    ]]
                }
            });
        }

        const text = `üóë *–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n` +
            `üÜî *ID –∞–¥–º–∏–Ω–∞:* \`${adminId}\`\n\n` +
            `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?\n\n` +
            `–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.`;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `admin_confirm_remove_${adminId}` },
                    { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_list_admins' }
                ]
            ]
        };

        this.bot.editMessageText(text, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    async executeRemoveAdmin(chatId, messageId, adminId) {
        try {
            const adminConfig = require('../config/adminConfig');
            const result = adminConfig.removeAdmin(parseInt(adminId), chatId);

            if (result.success) {
                this.bot.editMessageText(`‚úÖ ${result.message}\n\nüÜî –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω: \`${adminId}\``, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown'
                });

                // –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
                try {
                    await this.bot.sendMessage(parseInt(adminId),
                        '‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n\n–í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n\n–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω.',
                        { parse_mode: 'Markdown' }
                    );
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞:', error.message);
                }

                setTimeout(() => this.showAdminMenu(chatId), 2000);
            } else {
                this.bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_list_admins' }
                        ]]
                    }
                });
            }
        } catch (error) {
            console.error('Execute remove admin error:', error);
            this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞');
        }
    }
}

module.exports = AdminHandler;