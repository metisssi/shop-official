const Category = require('./models/Category');
const Property = require('./models/Property');

class AdminHandler {
    constructor(bot, adminIds = []) {
        this.bot = bot;
        this.adminIds = adminIds; // –ú–∞—Å—Å–∏–≤ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        this.setupAdminCommands();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    isAdmin(userId) {
        return this.adminIds.includes(userId);
    }

    setupAdminCommands() {
        // –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é
        this.bot.onText(/\/admin/, (msg) => {
            if (!this.isAdmin(msg.from.id)) {
                return this.bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            }
            this.showAdminMenu(msg.chat.id);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        this.bot.on('callback_query', (query) => {
            if (!this.isAdmin(query.from.id)) return;
            this.handleAdminCallback(query);
        });
    }

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    showAdminMenu(chatId) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏', callback_data: 'admin_categories' },
                    { text: 'üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é', callback_data: 'admin_properties' }
                ],
                [
                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
                    { text: 'üìã –ó–∞–∫–∞–∑—ã', callback_data: 'admin_orders' }
                ]
            ]
        };

        this.bot.sendMessage(chatId, 'üîß *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω callback'–æ–≤
    async handleAdminCallback(query) {
        const data = query.data;
        const chatId = query.message.chat.id;
        const messageId = query.message.message_id;

        try {
            switch (data) {
                case 'admin_categories':
                    await this.showCategoriesMenu(chatId, messageId);
                    break;
                case 'admin_properties':
                    await this.showPropertiesMenu(chatId, messageId);
                    break;
                case 'category_add':
                    await this.startAddCategory(chatId);
                    break;
                case 'category_list':
                    await this.showCategoriesList(chatId, messageId);
                    break;
                case 'property_add':
                    await this.startAddProperty(chatId);
                    break;
                case 'property_list':
                    await this.showPropertiesList(chatId, messageId);
                    break;
                default:
                    if (data.startsWith('edit_category_')) {
                        const categoryId = data.replace('edit_category_', '');
                        await this.editCategory(chatId, messageId, categoryId);
                    } else if (data.startsWith('delete_category_')) {
                        const categoryId = data.replace('delete_category_', '');
                        await this.deleteCategory(chatId, messageId, categoryId);
                    } else if (data.startsWith('edit_property_')) {
                        const propertyId = data.replace('edit_property_', '');
                        await this.editProperty(chatId, messageId, propertyId);
                    } else if (data.startsWith('delete_property_')) {
                        const propertyId = data.replace('delete_property_', '');
                        await this.deleteProperty(chatId, messageId, propertyId);
                    }
                    break;
            }
        } catch (error) {
            console.error('Admin callback error:', error);
            this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }

        this.bot.answerCallbackQuery(query.id);
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ===

    // –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    showCategoriesMenu(chatId, messageId) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: 'category_add' },
                    { text: 'üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', callback_data: 'category_list' }
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data: 'admin_menu' }]
            ]
        };

        this.bot.editMessageText('üìÇ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    async showCategoriesList(chatId, messageId) {
        try {
            const categories = await Category.find().sort({ order: 1, name: 1 });
            
            if (categories.length === 0) {
                return this.bot.editMessageText('üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_categories' }
                        ]]
                    }
                });
            }

            let text = 'üìÇ *–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*\n\n';
            const keyboard = [];

            categories.forEach((category, index) => {
                const status = category.isActive ? '‚úÖ' : '‚ùå';
                text += `${index + 1}. ${status} *${category.name}*\n`;
                text += `   üìù ${category.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n`;
                text += `   üîÑ –ü–æ—Ä—è–¥–æ–∫: ${category.order}\n\n`;

                keyboard.push([
                    { text: `‚úèÔ∏è ${category.name}`, callback_data: `edit_category_${category._id}` },
                    { text: `üóë –£–¥–∞–ª–∏—Ç—å`, callback_data: `delete_category_${category._id}` }
                ]);
            });

            keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_categories' }]);

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: keyboard }
            });
        } catch (error) {
            console.error('Show categories list error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        }
    }

    // –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async startAddCategory(chatId) {
        this.bot.sendMessage(chatId, '‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', {
            parse_mode: 'Markdown'
        });

        // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.waitForCategoryName(chatId);
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    waitForCategoryName(chatId) {
        const handler = (msg) => {
            if (msg.chat.id !== chatId || !this.isAdmin(msg.from.id)) return;

            const name = msg.text.trim();
            if (name.length < 2) {
                this.bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                return;
            }

            this.bot.removeListener('message', handler);
            this.requestCategoryDescription(chatId, name);
        };

        this.bot.on('message', handler);
    }

    // –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    requestCategoryDescription(chatId, name) {
        this.bot.sendMessage(chatId, `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: *${name}*\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):`, {
            parse_mode: 'Markdown'
        });

        const handler = (msg) => {
            if (msg.chat.id !== chatId || !this.isAdmin(msg.from.id)) return;

            const description = msg.text.trim() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ? '' : msg.text.trim();
            this.bot.removeListener('message', handler);
            this.createCategory(chatId, name, description);
        };

        this.bot.on('message', handler);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async createCategory(chatId, name, description) {
        try {
            const category = new Category({
                name,
                description,
                isActive: true,
                order: 0
            });

            await category.save();
            
            this.bot.sendMessage(chatId, `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "*${name}*" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`, {
                parse_mode: 'Markdown'
            });
            
            setTimeout(() => this.showAdminMenu(chatId), 1000);
        } catch (error) {
            console.error('Create category error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async editCategory(chatId, messageId, categoryId) {
        try {
            const category = await Category.findById(categoryId);
            if (!category) {
                return this.bot.sendMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const status = category.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
            const text = `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n` +
                        `üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${category.name}\n` +
                        `üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* ${category.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                        `üìä *–°—Ç–∞—Ç—É—Å:* ${status}\n` +
                        `üîÑ *–ü–æ—Ä—è–¥–æ–∫:* ${category.order}`;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_cat_name_${categoryId}` },
                        { text: 'üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_cat_desc_${categoryId}` }
                    ],
                    [
                        { text: category.isActive ? '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', callback_data: `toggle_cat_${categoryId}` },
                        { text: 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫', callback_data: `edit_cat_order_${categoryId}` }
                    ],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'category_list' }]
                ]
            };

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('Edit category error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async deleteCategory(chatId, messageId, categoryId) {
        try {
            const category = await Category.findById(categoryId);
            if (!category) {
                return this.bot.sendMessage(chatId, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const propertiesCount = await Property.countDocuments({ categoryId });
            
            let text = `üóë *–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*\n\n` +
                      `üìù *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${category.name}\n`;
            
            if (propertiesCount > 0) {
                text += `‚ö†Ô∏è *–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${propertiesCount} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n` +
                       `–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –±—É–¥—É—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã!\n\n` +
                       `–í—ã —É–≤–µ—Ä–µ–Ω—ã?`;
            } else {
                text += `\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?`;
            }

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_cat_${categoryId}` },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'category_list' }
                    ]
                ]
            };

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('Delete category error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨–Æ ===

    // –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é
    showPropertiesMenu(chatId, messageId) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç', callback_data: 'property_add' },
                    { text: 'üìã –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤', callback_data: 'property_list' }
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data: 'admin_menu' }]
            ]
        };

        this.bot.editMessageText('üè† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }

    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    async showPropertiesList(chatId, messageId) {
        try {
            const properties = await Property.find().populate('categoryId').sort({ order: 1, name: 1 });
            
            if (properties.length === 0) {
                return this.bot.editMessageText('üè† *–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å*\n\n‚ùå –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_properties' }
                        ]]
                    }
                });
            }

            let text = 'üè† *–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:*\n\n';
            const keyboard = [];

            properties.forEach((property, index) => {
                const status = property.isAvailable ? '‚úÖ' : '‚ùå';
                const category = property.categoryId ? property.categoryId.name : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
                
                text += `${index + 1}. ${status} *${property.name}*\n`;
                text += `   üìÇ ${category}\n`;
                text += `   üí∞ ${property.price.toLocaleString()} ‚ÇΩ\n`;
                text += `   üìç ${property.specifications?.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;

                keyboard.push([
                    { text: `‚úèÔ∏è ${property.name}`, callback_data: `edit_property_${property._id}` },
                    { text: `üóë –£–¥–∞–ª–∏—Ç—å`, callback_data: `delete_property_${property._id}` }
                ]);
            });

            keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_properties' }]);

            this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: keyboard }
            });
        } catch (error) {
            console.error('Show properties list error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏');
        }
    }

    // –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    async startAddProperty(chatId) {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        try {
            const categories = await Category.find({ isActive: true }).sort({ order: 1, name: 1 });
            
            if (categories.length === 0) {
                return this.bot.sendMessage(chatId, '‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
            }

            let text = '‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:';
            const keyboard = [];

            categories.forEach(category => {
                keyboard.push([{ text: category.name, callback_data: `select_cat_${category._id}` }]);
            });

            keyboard.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_properties' }]);

            this.bot.sendMessage(chatId, text, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: keyboard }
            });
        } catch (error) {
            console.error('Start add property error:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        }
    }
}

module.exports = AdminHandler;