// clientHandler.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
const config = require('../config/config');
const Keyboards = require('../keyboards');

class ClientHandler {
    constructor(bot, database) {
        this.bot = bot;
        this.db = database;
        this.userSessions = new Map();

        // –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
        this.paymentDetails = {
            cardNumber: "4111 1111 1111 1111",
            cardHolder: "IVAN PETROV",
            bank: "ƒåesk√° spo≈ôitelna",
            message: "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
        };
    }

    getUserSession(userId) {
        if (!this.userSessions.has(userId)) {
            this.userSessions.set(userId, {
                cart: [],
                currentCategory: null,
                currentProperty: null,
                state: 'start',
                lastMessageType: 'text',
                lastMessageId: null
            });
        }
        return this.userSessions.get(userId);
    }

    async handleStart(msg) {
        const chatId = msg.chat.id;
        const session = this.getUserSession(chatId);
        session.state = 'choosing_action';  // –ò–ó–ú–ï–ù–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        session.lastMessageType = 'text';

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.db.createOrUpdateUser({
            userId: chatId,
            username: msg.from.username,
            firstName: msg.from.first_name,
            lastName: msg.from.last_name
        });

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const welcomeText = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!\n\nüè† –£ –Ω–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ª—É—á—à–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\nüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\nüöÄ –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:`;

        await this.bot.sendMessage(chatId, welcomeText, Keyboards.getStartKeyboard());
    }

    async handleCallback(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        const data = callbackQuery.data;
        const session = this.getUserSession(chatId);

        console.log('üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ callback:', { userId: chatId, data, sessionState: session.state, lastMessageType: session.lastMessageType });

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ callback'–∏
        if (data.startsWith('admin_') ||
            data.startsWith('category_add') ||
            data.startsWith('property_add') ||
            data.startsWith('product_add') ||
            data.startsWith('product_list') ||
            data.startsWith('add_product_to_') ||
            data.startsWith('edit_') ||
            data.startsWith('delete_') ||
            data.startsWith('confirm_') ||
            data.startsWith('toggle_') ||
            data.startsWith('select_cat_') ||
            data.startsWith('manage_') ||
            data.startsWith('view_') ||
            data.startsWith('set_main_') ||
            data.startsWith('delete_photo_')) {
            return;
        }

        // –£–±–∏—Ä–∞–µ–º ELSE! –î–µ–ª–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏:
        if (data === 'work_with_bot') {
            await this.showCategories(chatId, messageId);

        } else if (data === 'contact_operator') {
            await this.showOperators(chatId, messageId);

        } else if (data === 'view_cart') {
            await this.showCart(chatId, messageId);

        } else if (data === 'request_address') {
            await this.requestDeliveryAddress(chatId, messageId);

        } else if (data === 'address_entered') {
            await this.showPaymentOptions(chatId, messageId);

        } else if (data === 'clear_cart') {
            session.cart = [];
            await this.editOrSendMessage(chatId, messageId, "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", Keyboards.getStartKeyboard());
        }
        try {
            if (data === 'contact_operator') {
                await this.showOperators(chatId, messageId);

            } else if (data.startsWith('category_')) {
                const categoryId = data.split('_')[1];
                if (categoryId && categoryId.length === 24) {
                    await this.showProperties(chatId, messageId, categoryId);
                }

            } else if (data.startsWith('property_')) {
                const propertyId = data.split('_')[1];
                if (propertyId && propertyId.length === 24) {
                    await this.showPropertyDetail(chatId, messageId, propertyId);
                }

            } else if (data.startsWith('select_quantity_')) {
                const propertyId = data.split('_')[2];
                console.log('üõí –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', propertyId);
                if (propertyId && propertyId.length === 24) {
                    await this.showQuantitySelection(chatId, messageId, propertyId);
                }

            } else if (data.startsWith('quantity_')) {
                const parts = data.split('_');
                const propertyId = parts[1];
                const quantity = parts[2];
                console.log('üì¶ –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', { propertyId, quantity });

                if (propertyId && propertyId.length === 24) {
                    if (quantity === 'custom') {
                        await this.requestCustomQuantity(chatId, messageId, propertyId);
                    } else {
                        const qty = parseInt(quantity);
                        if (!isNaN(qty) && qty > 0) {
                            await this.addToCart(chatId, messageId, propertyId, qty);
                        }
                    }
                }

            } else if (data === 'choose_more_items') {
                await this.showCategories(chatId, messageId);

            } else if (data === 'proceed_to_payment') {
                await this.showCart(chatId, messageId);

            } else if (data === 'view_cart') {
                await this.showCart(chatId, messageId);

            } else if (data === 'clear_cart') {
                session.cart = [];
                await this.editOrSendMessage(chatId, messageId, "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", Keyboards.getStartKeyboard());

            } else if (data === 'payment_card') {
                await this.showCardPaymentDetails(chatId, messageId);

            } else if (data === 'payment_cash') {
                await this.showCashPaymentInfo(chatId, messageId);

            } else if (data === 'confirm_card_payment') {
                await this.processCardPayment(chatId, messageId);

            } else if (data === 'confirm_cash_payment') {
                await this.processCashPayment(chatId, messageId);

            } else if (data === 'payment_completed') {
                await this.completeOrder(chatId, messageId);

            } else if (data === 'my_stats') {
                await this.showUserStats(chatId, messageId);

            } else if (data === 'back_to_categories') {
                await this.showCategories(chatId, messageId);

            } else if (data === 'back_to_start') {
                session.state = 'choosing_action';
                const welcomeText = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!\n\nüè† –£ –Ω–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ª—É—á—à–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\nüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\nüöÄ –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:`;
                await this.editOrSendMessage(chatId, messageId, welcomeText, Keyboards.getStartKeyboard());

            } else if (data === 'current_page') {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                return;
            }

            await this.bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, { text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" });
        }
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    async editOrSendMessage(chatId, messageId, text, keyboard, parseMode = null) {
        const session = this.getUserSession(chatId);

        try {
            if (session.lastMessageType === 'text') {
                // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const options = {
                    chat_id: chatId,
                    message_id: messageId,
                    ...keyboard
                };
                if (parseMode) options.parse_mode = parseMode;

                await this.bot.editMessageText(text, options);
            } else {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ
                const options = { ...keyboard };
                if (parseMode) options.parse_mode = parseMode;

                const newMessage = await this.bot.sendMessage(chatId, text, options);
                session.lastMessageId = newMessage.message_id;
                session.lastMessageType = 'text';
            }
        } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ:', error.message);
            // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const options = { ...keyboard };
            if (parseMode) options.parse_mode = parseMode;

            const newMessage = await this.bot.sendMessage(chatId, text, options);
            session.lastMessageId = newMessage.message_id;
            session.lastMessageType = 'text';
        }
    }

    async showCategories(chatId, messageId) {
        try {
            const categories = await this.db.getCategories();
            const session = this.getUserSession(chatId);
            session.state = 'browsing_categories';

            const text = "üè† –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:";
            const hasItemsInCart = session.cart.length > 0;
            const keyboard = Keyboards.getCategoriesKeyboard(categories, hasItemsInCart);

            await this.editOrSendMessage(chatId, messageId, text, keyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        }
    }

    async showProperties(chatId, messageId, categoryId) {
        try {
            const properties = await this.db.getPropertiesByCategory(categoryId);
            const category = await this.db.getCategoryById(categoryId);
            const session = this.getUserSession(chatId);
            session.state = 'browsing_properties';
            session.currentCategory = categoryId;

            if (properties.length === 0) {
                const hasItemsInCart = session.cart.length > 0;
                const keyboard = Keyboards.getCategoriesKeyboard(await this.db.getCategories(), hasItemsInCart);
                await this.editOrSendMessage(chatId, messageId, "üòî –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.", keyboard);
                return;
            }

            const text = `üèòÔ∏è ${category.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:`;
            const hasItemsInCart = session.cart.length > 0;
            const keyboard = Keyboards.getPropertiesKeyboard(properties, categoryId, hasItemsInCart);

            await this.editOrSendMessage(chatId, messageId, text, keyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
        }
    }

    async showPropertyDetail(chatId, messageId, propertyId) {
        try {
            const property = await this.db.getPropertyById(propertyId);
            const session = this.getUserSession(chatId);
            session.state = 'viewing_property';
            session.currentProperty = propertyId;

            console.log('üè† –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞:', { propertyId, propertyName: property.name });

            let text = `üè† *${property.name}*\n\n`;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–æ–Ω–∞—Ö
            if (property.priceInCZK) {
                text += `üí∞ *–¶–µ–Ω–∞:* ${property.priceInCZK.toLocaleString('cs-CZ')} Kƒç\n\n`;
            } else if (property.price) {
                // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫—Ä–æ–Ω—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å 1 RUB = 0.4 CZK)
                const priceInCZK = Math.round(property.price * 0.4);
                text += `üí∞ *–¶–µ–Ω–∞:* ${priceInCZK.toLocaleString('cs-CZ')} Kƒç\n\n`;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if (property.description && property.description.trim()) {
                text += `üìù ${property.description}`;
            }

            const hasItemsInCart = session.cart.length > 0;
            const keyboard = Keyboards.getPropertyDetailKeyboard(propertyId, property.categoryId._id, hasItemsInCart);

            // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            if (property.photos && property.photos.length > 0) {
                const mainPhoto = property.photos.find(photo => photo.isMain) || property.photos[0];

                try {
                    const photoMessage = await this.bot.sendPhoto(chatId, mainPhoto.fileId, {
                        caption: text,
                        parse_mode: 'Markdown',
                        ...keyboard
                    });

                    session.lastMessageType = 'photo';
                    session.lastMessageId = photoMessage.message_id;

                    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try {
                        await this.bot.deleteMessage(chatId, messageId);
                    } catch (deleteError) {
                        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', deleteError.message);
                    }
                } catch (photoError) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç:', photoError);
                    await this.editOrSendMessage(chatId, messageId, text, keyboard, 'Markdown');
                }
            } else {
                await this.editOrSendMessage(chatId, messageId, text, keyboard, 'Markdown');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
        }
    }

    async showQuantitySelection(chatId, messageId, propertyId) {
        try {
            const property = await this.db.getPropertyById(propertyId);
            const session = this.getUserSession(chatId);
            session.state = 'choosing_quantity';

            console.log('üì¶ –ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', { propertyId, propertyName: property.name, lastMessageType: session.lastMessageType });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤ –∫—Ä–æ–Ω–∞—Ö
            let priceText = '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            if (property.priceInCZK) {
                priceText = `${property.priceInCZK.toLocaleString('cs-CZ')} Kƒç`;
            } else if (property.price) {
                const priceInCZK = Math.round(property.price * 0.4);
                priceText = `${priceInCZK.toLocaleString('cs-CZ')} Kƒç`;
            }

            const text = `üè† ${property.name}\n\nüí∞ –¶–µ–Ω–∞: ${priceText}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:`;
            const keyboard = Keyboards.getQuantityKeyboard(propertyId);

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            await this.editOrSendMessage(chatId, messageId, text, keyboard);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞');
        }
    }

    async addToCart(chatId, messageId, propertyId, quantity) {
        try {
            const property = await this.db.getPropertyById(propertyId);
            const session = this.getUserSession(chatId);

            console.log('üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É:', { propertyId, quantity, propertyName: property.name });

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –≤ –∫—Ä–æ–Ω–∞—Ö
            let priceInCZK;
            if (property.priceInCZK) {
                priceInCZK = property.priceInCZK;
            } else if (property.price) {
                priceInCZK = Math.round(property.price * 0.4); // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ —Ä—É–±–ª–µ–π
            } else {
                priceInCZK = 0;
            }

            const totalPrice = priceInCZK * quantity;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
            const existingItem = session.cart.find(item => item.propertyId.toString() === propertyId);

            if (existingItem) {
                existingItem.quantity += quantity;
                existingItem.total = existingItem.price * existingItem.quantity;
                console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ');
            } else {
                session.cart.push({
                    propertyId: property._id,
                    name: property.name,
                    price: priceInCZK,
                    currency: 'CZK',
                    quantity: quantity,
                    total: totalPrice
                });
                console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É');
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É –≤–º–µ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
            let text = `‚úÖ *–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!*\n\n`;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É
            text += `üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n`;
            let totalCartAmount = 0;

            session.cart.forEach((item, index) => {
                text += `${index + 1}. *${item.name}*\n`;
                text += `   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`;
                text += `   üí∞ –¶–µ–Ω–∞: ${item.price.toLocaleString('cs-CZ')} Kƒç\n`;
                text += `   üíµ –°—É–º–º–∞: ${item.total.toLocaleString('cs-CZ')} Kƒç\n\n`;
                totalCartAmount += item.total;
            });

            text += `üí≥ *–û–±—â–∞—è —Å—É–º–º–∞: ${totalCartAmount.toLocaleString('cs-CZ')} Kƒç*\n\n`;
            text += `*–ß—Ç–æ –¥–∞–ª—å—à–µ?*`;

            await this.editOrSendMessage(chatId, messageId, text, Keyboards.getAfterAddToCartKeyboard(), 'Markdown');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É');
        }
    }

    async showCart(chatId, messageId) {
        try {
            const session = this.getUserSession(chatId);

            if (session.cart.length === 0) {
                await this.editOrSendMessage(chatId, messageId, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.", Keyboards.getStartKeyboard());
                return;
            }

            let text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n";
            let totalAmount = 0;

            session.cart.forEach((item, index) => {
                text += `${index + 1}. *${item.name}*\n`;
                text += `   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`;
                text += `   üí∞ –¶–µ–Ω–∞: ${item.price.toLocaleString('cs-CZ')} Kƒç\n`;
                text += `   üíµ –°—É–º–º–∞: ${item.total.toLocaleString('cs-CZ')} Kƒç\n\n`;

                totalAmount += item.total;
            });

            text += `üí≥ *–û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toLocaleString('cs-CZ')} Kƒç*\n\n`;
            text += `üìç *–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏*`;

            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "üìç –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data: "request_address" }],
                        [
                            { text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data: "choose_more_items" },
                            { text: "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data: "clear_cart" }
                        ]
                    ]
                }
            };

            await this.editOrSendMessage(chatId, messageId, text, keyboard, 'Markdown');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        }
    }

    async showCardPaymentDetails(chatId, messageId) {
        try {
            const session = this.getUserSession(chatId);
            const totalAmount = session.cart.reduce((sum, item) => sum + item.total, 0);

            const text = `üí≥ *–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É*\n\n` +
                `üí∞ *–ö –æ–ø–ª–∞—Ç–µ:* ${totalAmount.toLocaleString('cs-CZ')} Kƒç\n\n` +
                `*–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n` +
                `üè¶ –ë–∞–Ω–∫: ${this.paymentDetails.bank}\n` +
                `üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: \`${this.paymentDetails.cardNumber}\`\n` +
                `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${this.paymentDetails.cardHolder}\n` +
                `üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${this.paymentDetails.message}\n\n` +
                `*–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"*`;

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data: "confirm_card_payment" }],
                        [{ text: "üîÑ –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data: "address_entered" }]
                    ]
                }
            };

            await this.editOrSendMessage(chatId, messageId, text, keyboard, 'Markdown');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', error);
        }
    }

    async showCashPaymentInfo(chatId, messageId) {
        try {
            const session = this.getUserSession(chatId);
            const totalAmount = session.cart.reduce((sum, item) => sum + item.total, 0);

            const text = `üíµ *–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ*\n\n` +
                `üí∞ *–ö –æ–ø–ª–∞—Ç–µ:* ${totalAmount.toLocaleString('cs-CZ')} Kƒç\n\n` +
                `üìû *–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä –∏ —É—Ç–æ—á–Ω–∏—Ç:*\n` +
                `‚Ä¢ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏\n` +
                `‚Ä¢ –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n` +
                `‚Ä¢ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n\n` +
                `*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:*`;

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data: "confirm_cash_payment" }],
                        [{ text: "üîÑ –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã", callback_data: "address_entered" }]
                    ]
                }
            };

            await this.editOrSendMessage(chatId, messageId, text, keyboard, 'Markdown');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ:', error);
        }
    }

    async processCardPayment(chatId, messageId) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"
            await this.createOrderInDatabase(chatId, 'card', 'pending_payment');

            const text = `‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –¥–æ—Å—Ç–∞–≤–∫–∏!*\n\n` +
                `üìû *–° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä* –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n` +
                `üïê –û–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n\n` +
                `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!`;

            await this.editOrSendMessage(chatId, messageId, text, Keyboards.getOrderCompleteKeyboard(), 'Markdown');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π:', error);
        }
    }

    async processCashPayment(chatId, messageId) {
        try {
            await this.createOrderInDatabase(chatId, 'cash', 'confirmed');

            const text = `‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.*\n\n` +
                `üìû *–ö—É—Ä—å–µ—Ä —É—Ç–æ—á–Ω–∏—Ç:*\n` +
                `‚Ä¢ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏\n` +
                `‚Ä¢ –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n` +
                `‚Ä¢ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n\n` +
                `üïê –û–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n\n` +
                `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!`;

            await this.editOrSendMessage(chatId, messageId, text, Keyboards.getOrderCompleteKeyboard(), 'Markdown');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã:', error);
        }
    }

    async completeOrder(chatId, messageId) {
        try {
            const session = this.getUserSession(chatId);

            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            session.cart = [];
            session.state = 'start';

            const text = `‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!*\n\n` +
                `üìû *–° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä* –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n` +
                `üïê –û–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n\n` +
                `–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â—ë?`;

            await this.editOrSendMessage(chatId, messageId, text, Keyboards.getOrderCompleteKeyboard(), 'Markdown');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        }
    }

    async createOrderInDatabase(chatId, paymentMethod, status = 'new') {
        try {
            const session = this.getUserSession(chatId);
            const user = await this.db.getUserById(chatId);

            if (session.cart.length === 0) {
                throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
            }

            if (!session.deliveryAddress) {
                throw new Error('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω');
            }

            const totalAmount = session.cart.reduce((sum, item) => sum + item.total, 0);

            // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const order = await this.db.createOrder({
                userId: chatId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                phone: user.phone,
                deliveryAddress: session.deliveryAddress,
                items: session.cart,
                totalAmount: totalAmount,
                paymentMethod: paymentMethod,
                status: status
            });

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è @metisuk
            let orderText = `üîî *–ù–û–í–´–ô –ó–ê–ö–ê–ó #${order._id.toString().slice(-6)}*\n\n`;

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
            orderText += `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`;
            if (user.lastName) orderText += ` ${user.lastName}`;
            orderText += `\n`;
            if (user.username) orderText += `üì± @${user.username}\n`;
            orderText += `üÜî ID: ${chatId}\n\n`;

            // –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            orderText += `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*\n${session.deliveryAddress}\n\n`;

            // –¢–æ–≤–∞—Ä—ã
            orderText += `üõí *–¢–æ–≤–∞—Ä—ã:*\n`;
            session.cart.forEach((item, index) => {
                orderText += `${index + 1}. *${item.name}*\n`;
                orderText += `   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`;
                orderText += `   üí∞ –¶–µ–Ω–∞: ${item.price.toLocaleString('cs-CZ')} Kƒç\n`;
                orderText += `   üíµ –°—É–º–º–∞: ${item.total.toLocaleString('cs-CZ')} Kƒç\n\n`;
            });

            // –ò—Ç–æ–≥–æ
            orderText += `üí≥ *–û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toLocaleString('cs-CZ')} Kƒç*\n`;
            orderText += `üí∞ *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* ${paymentMethod === 'card' ? 'üí≥ –ö–∞—Ä—Ç–∞' : 'üíµ –ù–∞–ª–∏—á–Ω—ã–µ'}\n`;
            orderText += `üìÖ *–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* ${new Date().toLocaleString('ru-RU')}\n\n`;

            orderText += `üîî *–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º!*`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ @metisuk
            try {
                await this.bot.sendMessage('@metisuk', orderText, { parse_mode: 'Markdown' });
                console.log('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ @metisuk');

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                await this.bot.sendMessage('@metisuk',
                    `üìû *–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞*\n\nüë§ –ö–ª–∏–µ–Ω—Ç: ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\nüÜî ID: ${chatId}`,
                    { parse_mode: 'Markdown' }
                );

            } catch (error) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ @metisuk:', error);
                // –í –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                for (const operatorId of Object.values(config.OPERATORS)) {
                    try {
                        await this.bot.sendMessage(operatorId, orderText, { parse_mode: 'Markdown' });
                        // –ò –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–≤—è–∑–∏
                        await this.bot.sendMessage(operatorId,
                            `üìû *–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞*\n\nüë§ –ö–ª–∏–µ–Ω—Ç: ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\nüÜî ID: ${chatId}`,
                            { parse_mode: 'Markdown' }
                        );
                    } catch (error) {
                        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ${operatorId}:`, error);
                    }
                }
            }

            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –∞–¥—Ä–µ—Å
            session.cart = [];
            session.deliveryAddress = null;
            session.state = 'start';

            return order;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
            throw error;
        }
    }
    async requestCustomQuantity(chatId, messageId, propertyId) {
        try {
            const property = await this.db.getPropertyById(propertyId);
            const session = this.getUserSession(chatId);
            session.state = 'waiting_custom_quantity';
            session.currentProperty = propertyId;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤ –∫—Ä–æ–Ω–∞—Ö
            let priceText = '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            if (property.priceInCZK) {
                priceText = `${property.priceInCZK.toLocaleString('cs-CZ')} Kƒç`;
            } else if (property.price) {
                const priceInCZK = Math.round(property.price * 0.4);
                priceText = `${priceInCZK.toLocaleString('cs-CZ')} Kƒç`;
            }

            const text = `üè† ${property.name}\n\nüí∞ –¶–µ–Ω–∞: ${priceText}\n\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º:`;
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `select_quantity_${propertyId}` }]
                    ]
                }
            };

            await this.editOrSendMessage(chatId, messageId, text, keyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
        }
    }

    async handleTextMessage(msg) {
        const chatId = msg.chat.id;
        const session = this.getUserSession(chatId);

        console.log('üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', { userId: chatId, state: session.state, text: msg.text });

        if (session.state === 'waiting_custom_quantity') {
            const quantity = parseInt(msg.text);

            if (isNaN(quantity) || quantity <= 0) {
                await this.bot.sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0");
                return;
            }

            if (quantity > 100) {
                await this.bot.sendMessage(chatId, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100");
                return;
            }

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                await this.bot.deleteMessage(chatId, msg.message_id);
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const loadingMessage = await this.bot.sendMessage(chatId, 'üîÑ –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É...');

            await this.addToCart(chatId, loadingMessage.message_id, session.currentProperty, quantity);
            session.state = 'browsing_properties';
        }
        else if (session.state === 'waiting_address') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
            if (!msg.text || msg.text.trim().length < 10) {
                await this.bot.sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)");
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ —Å–µ—Å—Å–∏–∏
            session.deliveryAddress = msg.text.trim();
            session.state = 'address_entered';

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                await this.bot.deleteMessage(chatId, msg.message_id);
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã
            const confirmMessage = await this.bot.sendMessage(chatId, '‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—ã–±–∏—Ä–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã...');
            await this.showPaymentOptions(chatId, confirmMessage.message_id);
        }
    }
    async showUserStats(chatId, messageId) {
        try {
            const user = await this.db.getUserById(chatId);
            const orders = await this.db.getOrdersByUser(chatId);

            let text = `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n`;
            text += `üë§ –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
            if (user.lastName) text += ` ${user.lastName}`;
            text += `\n`;
            if (user.username) text += `üì± Username: @${user.username}\n`;
            text += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.createdAt.toLocaleDateString('ru-RU')}\n`;
            text += `üõí –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${user.totalOrders}\n`;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É –≤ –∫—Ä–æ–Ω–∞—Ö
            const totalSpentCZK = Math.round(user.totalSpent * 0.4); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ä—É–±–ª–µ–π
            text += `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalSpentCZK.toLocaleString('cs-CZ')} Kƒç\n`;

            if (orders.length > 0) {
                text += `\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n`;
                orders.slice(0, 3).forEach((order, index) => {
                    const orderAmountCZK = Math.round(order.totalAmount * 0.4);
                    text += `${index + 1}. ${order.createdAt.toLocaleDateString('ru-RU')} - ${orderAmountCZK.toLocaleString('cs-CZ')} Kƒç (${order.status})\n`;
                });
            }

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data: "back_to_categories" }]
                    ]
                }
            };

            await this.editOrSendMessage(chatId, messageId, text, keyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    // –ü–æ–∫–∞–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    async showOperators(chatId, messageId) {
        const text = `üìû –ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`;

        try {
            const operatorsKeyboard = await Keyboards.getOperatorsKeyboard();
            await this.editOrSendMessage(chatId, messageId, text, operatorsKeyboard);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', error);
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await this.editOrSendMessage(chatId, messageId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", Keyboards.getStartKeyboard());
        }
    }

    // –ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    async requestDeliveryAddress(chatId, messageId) {
        try {
            const session = this.getUserSession(chatId);
            session.state = 'waiting_address';

            const text = `üìç *–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:`;

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "üîÑ –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data: "view_cart" }]
                    ]
                }
            };

            await this.editOrSendMessage(chatId, messageId, text, keyboard, 'Markdown');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–¥—Ä–µ—Å–∞:', error);
        }
    }
    –ê
    // –ü–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
    async showPaymentOptions(chatId, messageId) {
        try {
            const session = this.getUserSession(chatId);
            const totalAmount = session.cart.reduce((sum, item) => sum + item.total, 0);

            const text = `‚úÖ *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω*\n\n` +
                `üí≥ *–ö –æ–ø–ª–∞—Ç–µ: ${totalAmount.toLocaleString('cs-CZ')} Kƒç*\n\n` +
                `*–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*`;

            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "üíµ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ", callback_data: "payment_cash" }],
                        [{ text: "üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data: "payment_card" }],
                        [{ text: "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data: "request_address" }]
                    ]
                }
            };

            await this.editOrSendMessage(chatId, messageId, text, keyboard, 'Markdown');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã:', error);
        }
    }
}

module.exports = ClientHandler;