// clientHandler.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ showCategories
const config = require('../config/config');
const Keyboards = require('../keyboards');

class ClientHandler {
    constructor(bot, database) {
        this.bot = bot;
        this.db = database;
        this.userSessions = new Map();
    }

    getUserSession(userId) {
        if (!this.userSessions.has(userId)) {
            this.userSessions.set(userId, {
                cart: [],
                currentCategory: null,
                currentProperty: null,
                state: 'start'
            });
        }
        return this.userSessions.get(userId);
    }

    async handleStart(msg) {
        const chatId = msg.chat.id;
        const session = this.getUserSession(chatId);
        session.state = 'choosing_action';

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.db.createOrUpdateUser({
            userId: chatId,
            username: msg.from.username,
            firstName: msg.from.first_name,
            lastName: msg.from.last_name
        });

        const welcomeText = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!

üè† –£ –Ω–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ª—É—á—à–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
üöÄ –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫

–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:`;

        await this.bot.sendMessage(chatId, welcomeText, Keyboards.getStartKeyboard());
    }

    async handleCallback(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        const data = callbackQuery.data;
        const session = this.getUserSession(chatId);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ callback'–∏
        if (data.startsWith('admin_') ||
            data.startsWith('category_add') ||
            data.startsWith('property_add') ||
            data.startsWith('product_add') ||
            data.startsWith('product_list') ||
            data.startsWith('add_product_to_') ||
            data.startsWith('edit_') ||
            data.startsWith('delete_') ||
            data.startsWith('confirm_') ||
            data.startsWith('toggle_') ||
            data.startsWith('select_cat_') ||
            data.startsWith('manage_') ||
            data.startsWith('view_') ||
            data.startsWith('set_main_') ||
            data.startsWith('delete_photo_')) {
            return;
        }

        try {
            if (data === 'work_with_bot') {
                await this.showCategories(chatId, messageId);

            } else if (data === 'contact_operator') {
                await this.showOperators(chatId, messageId);

            } else if (data.startsWith('category_')) {
                const categoryId = data.split('_')[1];
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π ObjectId (24 —Å–∏–º–≤–æ–ª–∞)
                if (categoryId && categoryId.length === 24) {
                    await this.showProperties(chatId, messageId, categoryId);
                }

            } else if (data.startsWith('property_')) {
                const propertyId = data.split('_')[1];
                if (propertyId && propertyId.length === 24) {
                    await this.showPropertyDetail(chatId, messageId, propertyId);
                }

            } else if (data.startsWith('select_quantity_')) {
                const propertyId = data.split('_')[2];
                if (propertyId && propertyId.length === 24) {
                    await this.showQuantitySelection(chatId, messageId, propertyId);
                }

            } else if (data.startsWith('quantity_')) {
                const [, propertyId, quantity] = data.split('_');
                if (propertyId && propertyId.length === 24) {
                    if (quantity === 'custom') {
                        await this.requestCustomQuantity(chatId, messageId, propertyId);
                    } else {
                        await this.addToCart(chatId, messageId, propertyId, parseInt(quantity));
                    }
                }

            } else if (data === 'continue_shopping') {
                await this.showCategories(chatId, messageId);

            } else if (data === 'view_cart') {
                await this.showCart(chatId, messageId);

            } else if (data === 'clear_cart') {
                session.cart = [];
                await this.bot.editMessageText(
                    "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!",
                    { chat_id: chatId, message_id: messageId, ...Keyboards.getStartKeyboard() }
                );

            } else if (data === 'payment_card') {
                await this.showOrderConfirmation(chatId, messageId, 'card');

            } else if (data === 'payment_cash') {
                await this.showOrderConfirmation(chatId, messageId, 'cash');

            } else if (data === 'confirm_order_card') {
                await this.completeOrder(chatId, messageId, 'card');

            } else if (data === 'confirm_order_cash') {
                await this.completeOrder(chatId, messageId, 'cash');

            } else if (data === 'complete_order') {
                // –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
                await this.showCart(chatId, messageId);

            } else if (data === 'my_stats') {
                await this.showUserStats(chatId, messageId);

            } else if (data === 'back_to_categories') {
                await this.showCategories(chatId, messageId);

            } else if (data === 'back_to_start') {
                session.state = 'choosing_action';
                await this.bot.editMessageText(
                    `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!\n\nüè† –£ –Ω–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ª—É—á—à–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\nüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\nüöÄ –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:`,
                    { chat_id: chatId, message_id: messageId, ...Keyboards.getStartKeyboard() }
                );
            } else if (data === 'current_page') {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                return;
            }

            await this.bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, { text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" });
        }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î showCategories
    async showCategories(chatId, messageId) {
        try {
            const categories = await this.db.getCategories();
            const session = this.getUserSession(chatId);
            session.state = 'browsing_categories';

            const text = "üè† –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:";
            
            // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
            const keyboard = Keyboards.getCategoriesKeyboard(categories);
            
            await this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                ...keyboard  // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç —Å reply_markup
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        }
    }

    async showProperties(chatId, messageId, categoryId) {
        try {
            const properties = await this.db.getPropertiesByCategory(categoryId);
            const category = await this.db.getCategoryById(categoryId);
            const session = this.getUserSession(chatId);
            session.state = 'browsing_properties';
            session.currentCategory = categoryId;

            if (properties.length === 0) {
                const keyboard = Keyboards.getCategoriesKeyboard(await this.db.getCategories());
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                const previousMsg = session.lastMessageType;
                if (previousMsg === 'photo') {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await this.bot.sendMessage(chatId, "üòî –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.", keyboard);
                } else {
                    await this.bot.editMessageText(
                        "üòî –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.",
                        { chat_id: chatId, message_id: messageId, ...keyboard }
                    );
                }
                return;
            }

            const text = `üèòÔ∏è ${category.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:`;
            const keyboard = Keyboards.getPropertiesKeyboard(properties, categoryId);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            session.lastMessageType = 'text';

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
            if (session.lastMessageType === 'photo') {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await this.bot.sendMessage(chatId, text, keyboard);
            } else {
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await this.bot.editMessageText(text, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...keyboard
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                const properties = await this.db.getPropertiesByCategory(categoryId);
                const category = await this.db.getCategoryById(categoryId);
                const text = `üèòÔ∏è ${category.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:`;
                const keyboard = Keyboards.getPropertiesKeyboard(properties, categoryId);
                
                await this.bot.sendMessage(chatId, text, keyboard);
            } catch (fallbackError) {
                console.error('Fallback –æ—à–∏–±–∫–∞:', fallbackError);
            }
        }
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    async showPropertyDetail(chatId, messageId, propertyId) {
        try {
            const property = await this.db.getPropertyById(propertyId);
            const session = this.getUserSession(chatId);
            session.state = 'viewing_property';
            session.currentProperty = propertyId;

            let text = `üè† *${property.name}*\n\n`;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ —Ç–æ–≤–∞—Ä–∞
            if (property.currency === 'CZK' && property.priceInCZK) {
                text += `üí∞ *–¶–µ–Ω–∞:* ${property.priceInCZK.toLocaleString('cs-CZ')} Kƒç\n\n`;
            } else {
                text += `üí∞ *–¶–µ–Ω–∞:* ${property.price.toLocaleString('ru-RU')} ‚ÇΩ\n\n`;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if (property.description && property.description.trim()) {
                text += `üìù ${property.description}`;
            }

            // üî• –£–ë–†–ê–ù–û: –ë–ª–æ–∫ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω

            const keyboard = Keyboards.getPropertyDetailKeyboard(propertyId, property.categoryId._id);

            // üî• –ù–û–í–û–ï: –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            if (property.photos && property.photos.length > 0) {
                const mainPhoto = property.photos.find(photo => photo.isMain) || property.photos[0];
                
                // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                session.lastMessageType = 'photo';
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                await this.bot.sendPhoto(chatId, mainPhoto.fileId, {
                    caption: text,
                    parse_mode: 'Markdown',
                    ...keyboard
                });
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    await this.bot.deleteMessage(chatId, messageId);
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                }
            } else {
                // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                session.lastMessageType = 'text';
                
                // –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await this.bot.editMessageText(text, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    ...keyboard
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
        }
    }

    async showQuantitySelection(chatId, messageId, propertyId) {
        try {
            const property = await this.db.getPropertyById(propertyId);
            const session = this.getUserSession(chatId);
            session.state = 'choosing_quantity';

            const text = `üè† ${property.name}\n\nüí∞ –¶–µ–Ω–∞: ${property.price.toLocaleString('ru-RU')} ‚ÇΩ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:`;

            await this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                ...Keyboards.getQuantityKeyboard(propertyId)
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
        }
    }

    async addToCart(chatId, messageId, propertyId, quantity) {
        try {
            const property = await this.db.getPropertyById(propertyId);
            const session = this.getUserSession(chatId);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ —Ç–æ–≤–∞—Ä–∞
            let priceToUse, priceDisplay;
            if (property.currency === 'CZK' && property.priceInCZK) {
                priceToUse = property.priceInCZK;
                priceDisplay = `${(priceToUse * quantity).toLocaleString('cs-CZ')} Kƒç`;
            } else {
                priceToUse = property.price;
                priceDisplay = `${(priceToUse * quantity).toLocaleString('ru-RU')} ‚ÇΩ`;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
            const existingItem = session.cart.find(item => item.propertyId.toString() === propertyId);

            if (existingItem) {
                existingItem.quantity += quantity;
                existingItem.total = existingItem.price * existingItem.quantity;
            } else {
                session.cart.push({
                    propertyId: property._id,
                    name: property.name,
                    price: priceToUse,
                    currency: property.currency || 'RUB',
                    quantity: quantity,
                    total: priceToUse * quantity
                });
            }

            const text = `‚úÖ *–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!*\n\nüè† *${property.name}*\nüì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity}\nüí∞ –°—É–º–º–∞: ${priceDisplay}\n\nüõí *–í –∫–æ—Ä–∑–∏–Ω–µ:* ${session.cart.length} –ø–æ–∑.\n\n*–ß—Ç–æ –¥–∞–ª—å—à–µ?*`;

            await this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...Keyboards.getContinueShoppingKeyboard()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
        }
    }

    async showCart(chatId, messageId) {
        try {
            const session = this.getUserSession(chatId);

            if (session.cart.length === 0) {
                await this.bot.editMessageText(
                    "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
                    { chat_id: chatId, message_id: messageId, ...Keyboards.getStartKeyboard() }
                );
                return;
            }

            let text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n";
            let totalAmount = 0;

            session.cart.forEach((item, index) => {
                text += `${index + 1}. *${item.name}*\n`;
                text += `   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ
                if (item.currency === 'CZK') {
                    text += `   üí∞ –¶–µ–Ω–∞: ${item.price.toLocaleString('cs-CZ')} Kƒç\n`;
                    text += `   üíµ –°—É–º–º–∞: ${item.total.toLocaleString('cs-CZ')} Kƒç\n\n`;
                } else {
                    text += `   üí∞ –¶–µ–Ω–∞: ${item.price.toLocaleString('ru-RU')} ‚ÇΩ\n`;
                    text += `   üíµ –°—É–º–º–∞: ${item.total.toLocaleString('ru-RU')} ‚ÇΩ\n\n`;
                }
                
                totalAmount += item.total;
            });

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –æ–±—â–µ–π —Å—É–º–º—ã (–±–µ—Ä–µ–º –≤–∞–ª—é—Ç—É –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞)
            const mainCurrency = session.cart[0].currency || 'RUB';
            if (mainCurrency === 'CZK') {
                text += `üí≥ *–û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toLocaleString('cs-CZ')} Kƒç*\n\n`;
            } else {
                text += `üí≥ *–û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toLocaleString('ru-RU')} ‚ÇΩ*\n\n`;
            }
            
            text += `*–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*`;

            await this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...Keyboards.getCartKeyboard()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        }
    }

    // üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –æ–ø–ª–∞—Ç—ã
    async showOrderConfirmation(chatId, messageId, paymentMethod) {
        try {
            const session = this.getUserSession(chatId);
            const user = await this.db.getUserById(chatId);

            if (session.cart.length === 0) {
                await this.bot.editMessageText(
                    "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
                    { chat_id: chatId, message_id: messageId, ...Keyboards.getStartKeyboard() }
                );
                return;
            }

            const totalAmount = session.cart.reduce((sum, item) => sum + item.total, 0);
            const paymentText = paymentMethod === 'card' ? 'üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π' : 'üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É
            const mainCurrency = session.cart[0].currency || 'RUB';
            const totalFormatted = mainCurrency === 'CZK' ? 
                `${totalAmount.toLocaleString('cs-CZ')} Kƒç` : 
                `${totalAmount.toLocaleString('ru-RU')} ‚ÇΩ`;

            let text = `üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n`;
            text += `üë§ *–ó–∞–∫–∞–∑—á–∏–∫:* ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`;
            if (user.lastName) text += ` ${user.lastName}`;
            if (user.username) text += ` (@${user.username})`;
            text += `\n\n`;

            text += `üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n`;
            session.cart.forEach((item, index) => {
                text += `${index + 1}. ${item.name} √ó ${item.quantity}\n`;
            });

            text += `\nüí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* ${totalFormatted}\n`;
            text += `üí≥ *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* ${paymentText}\n\n`;

            if (paymentMethod === 'card') {
                text += `*–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π:*\n`;
                text += `–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–∞–º –±—É–¥—É—Ç –≤—ã—Å–ª–∞–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n\n`;
            } else {
                text += `*–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏:*\n`;
                text += `–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ —Å –Ω–∞—à–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º.\n\n`;
            }

            text += `*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:*`;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            session.paymentMethod = paymentMethod;

            await this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...Keyboards.getOrderConfirmationKeyboard()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        }
    }

    async showUserStats(chatId, messageId) {
        try {
            const user = await this.db.getUserById(chatId);
            const orders = await this.db.getOrdersByUser(chatId);

            let text = `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n`;
            text += `üë§ –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
            if (user.lastName) text += ` ${user.lastName}`;
            text += `\n`;
            if (user.username) text += `üì± Username: @${user.username}\n`;
            text += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.createdAt.toLocaleDateString('ru-RU')}\n`;
            text += `üõí –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${user.totalOrders}\n`;
            text += `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${user.totalSpent.toLocaleString('ru-RU')} ‚ÇΩ\n`;

            if (orders.length > 0) {
                text += `\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n`;
                orders.slice(0, 3).forEach((order, index) => {
                    text += `${index + 1}. ${order.createdAt.toLocaleDateString('ru-RU')} - ${order.totalAmount.toLocaleString('ru-RU')} ‚ÇΩ (${order.status})\n`;
                });
            }

            await this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data: "back_to_categories" }]
                    ]
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    async completeOrder(chatId, messageId) {
        try {
            const session = this.getUserSession(chatId);
            const user = await this.db.getUserById(chatId);

            if (session.cart.length === 0) {
                await this.bot.editMessageText(
                    "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
                    { chat_id: chatId, message_id: messageId, ...Keyboards.getStartKeyboard() }
                );
                return;
            }

            const totalAmount = session.cart.reduce((sum, item) => sum + item.total, 0);

            // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const order = await this.db.createOrder({
                userId: chatId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                phone: user.phone,
                items: session.cart,
                totalAmount: totalAmount
            });

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            let orderText = `üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order._id}\n\n`;
            orderText += `üë§ –û—Ç: ${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}`;
            if (user.lastName) orderText += ` ${user.lastName}`;
            orderText += `\n`;
            if (user.username) orderText += `üì± @${user.username}\n`;
            orderText += `üÜî ID: ${chatId}\n\n`;

            session.cart.forEach((item, index) => {
                orderText += `${index + 1}. ${item.name}\n`;
                orderText += `   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`;
                orderText += `   üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: ${item.price.toLocaleString('ru-RU')} ‚ÇΩ\n`;
                orderText += `   üíµ –°—É–º–º–∞: ${item.total.toLocaleString('ru-RU')} ‚ÇΩ\n\n`;
            });

            orderText += `üí≥ –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toLocaleString('ru-RU')} ‚ÇΩ\n`;
            orderText += `üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ${new Date().toLocaleString('ru-RU')}\n`;
            orderText += `\nüîî –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π!`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
            for (const operatorId of Object.values(config.OPERATORS)) {
                try {
                    await this.bot.sendMessage(operatorId, orderText);
                } catch (error) {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ${operatorId}:`, error);
                }
            }

            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            session.cart = [];
            session.state = 'start';

            const thankText = `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n–í–∞—à –∑–∞–∫–∞–∑ #${order._id} –Ω–∞ —Å—É–º–º—É ${totalAmount.toLocaleString('ru-RU')} ‚ÇΩ –ø—Ä–∏–Ω—è—Ç.\n–° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä.\n\nüìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é.`;

            await this.bot.editMessageText(thankText, {
                chat_id: chatId,
                message_id: messageId,
                ...Keyboards.getStartKeyboard()
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        }
    }

    async requestCustomQuantity(chatId, messageId, propertyId) {
        try {
            const property = await this.db.getPropertyById(propertyId);
            const session = this.getUserSession(chatId);
            session.state = 'waiting_custom_quantity';
            session.currentProperty = propertyId;

            const text = `üè† ${property.name}\n\nüí∞ –¶–µ–Ω–∞: ${property.price.toLocaleString('ru-RU')} ‚ÇΩ\n\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º:`;

            await this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `select_quantity_${propertyId}` }]
                    ]
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
        }
    }

    async handleTextMessage(msg) {
        const chatId = msg.chat.id;
        const session = this.getUserSession(chatId);

        if (session.state === 'waiting_custom_quantity') {
            const quantity = parseInt(msg.text);

            if (isNaN(quantity) || quantity <= 0) {
                await this.bot.sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0");
                return;
            }

            if (quantity > 100) {
                await this.bot.sendMessage(chatId, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100");
                return;
            }

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try {
                await this.bot.deleteMessage(chatId, msg.message_id);
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
            await this.addToCart(chatId, msg.message_id - 1, session.currentProperty, quantity);
            session.state = 'browsing_properties';
        }
    }

    // –ü–æ–∫–∞–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    async showOperators(chatId, messageId) {
        const text = `üìû –ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`;

        try {
            const operatorsKeyboard = await Keyboards.getOperatorsKeyboard();

            await this.bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                ...operatorsKeyboard
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', error);

            // Fallback –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await this.bot.editMessageText(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                {
                    chat_id: chatId,
                    message_id: messageId,
                    ...Keyboards.getStartKeyboard()
                }
            );
        }
    }
}

module.exports = ClientHandler;