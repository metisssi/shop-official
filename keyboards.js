// keyboards.js - –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const config = require('./config/config');

class Keyboards {
    static getStartKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "ü§ñ –†–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º", callback_data: "work_with_bot" }],
                    [{ text: "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data: "contact_operator" }]
                ]
            }
        };
    }

    static getCategoriesKeyboard(categories) {
        const keyboard = categories.map(category => [
            { text: category.name, callback_data: `category_${category._id}` }
        ]);
        
        keyboard.push([{ text: "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "my_stats" }]);
        
        return {
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    }

    static getPropertiesKeyboard(properties, categoryId) {
        const keyboard = properties.map(property => [
            { text: `${property.name} - ${property.price.toLocaleString('ru-RU')} ‚ÇΩ`, callback_data: `property_${property._id}` }
        ]);
        
        keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data: "back_to_categories" }]);
        
        return {
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    }

    static getPropertyDetailKeyboard(propertyId, categoryId) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üõí –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data: `select_quantity_${propertyId}` }],
                    [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data: `category_${categoryId}` }]
                ]
            }
        };
    }

    static getQuantityKeyboard(propertyId) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "1", callback_data: `quantity_${propertyId}_1` },
                        { text: "2", callback_data: `quantity_${propertyId}_2` },
                        { text: "3", callback_data: `quantity_${propertyId}_3` }
                    ],
                    [
                        { text: "4", callback_data: `quantity_${propertyId}_4` },
                        { text: "5", callback_data: `quantity_${propertyId}_5` },
                        { text: "–î—Ä—É–≥–æ–µ", callback_data: `quantity_${propertyId}_custom` }
                    ],
                    [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `property_${propertyId}` }]
                ]
            }
        };
    }

    static getContinueShoppingKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "‚úÖ –î–∞, –∑–∞–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data: "continue_shopping" }],
                    [{ text: "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data: "complete_order" }],
                    [{ text: "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data: "view_cart" }]
                ]
            }
        };
    }

    static getCartKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data: "complete_order" }],
                    [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data: "continue_shopping" }],
                    [{ text: "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data: "clear_cart" }]
                ]
            }
        };
    }

    static getOperatorsKeyboard() {
        const keyboard = config.AVAILABLE_OPERATORS.map(operator => [
            { text: `${operator.name} ${operator.username}`, url: `https://t.me/${operator.username.substring(1)}` }
        ]);
        
        keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_start" }]);
        
        return {
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    }
}

module.exports = Keyboards;