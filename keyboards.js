// keyboards.js - –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã
const config = require('./config/config');

class Keyboards {
    static getStartKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "ü§ñ –†–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º", callback_data: "work_with_bot" }],
                    [{ text: "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data: "contact_operator" }]
                ]
            }
        };
    }

    static getCategoriesKeyboard(categories, showCartButton = false) {
        const keyboard = categories.map(category => [{
            text: `üìÇ ${category.name}`,
            callback_data: `category_${category._id}`
        }]);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
        if (showCartButton) {
            keyboard.push([{ text: "üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data: "view_cart" }]);
        }

        keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_start" }]);

        return {
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    }

    static getPropertiesKeyboard(properties, categoryId, showCartButton = false) {
        const keyboard = properties.map(property => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–æ–Ω–∞—Ö
            let price;
            if (property.priceInCZK) {
                price = `${property.priceInCZK.toLocaleString('cs-CZ')} Kƒç`;
            } else if (property.price) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ä—É–±–ª–µ–π –≤ –∫—Ä–æ–Ω—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å)
                const priceInCZK = Math.round(property.price * 0.4);
                price = `${priceInCZK.toLocaleString('cs-CZ')} Kƒç`;
            } else {
                price = '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            }

            return [{
                text: `${property.name} - ${price}`,
                callback_data: `property_${property._id}`
            }];
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
        if (showCartButton) {
            keyboard.push([{ text: "üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data: "view_cart" }]);
        }

        keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data: "back_to_categories" }]);

        return {
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    }

    static getPropertyDetailKeyboard(propertyId, categoryId, showCartButton = false) {
        const keyboard = [
            [{ text: "üõí –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data: `select_quantity_${propertyId}` }]
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
        if (showCartButton) {
            keyboard.push([{ text: "üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data: "view_cart" }]);
        }

        keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data: `category_${categoryId}` }]);

        return {
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    static getQuantityKeyboard(propertyId) {
        console.log('üéπ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', propertyId);
        
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "1", callback_data: `quantity_${propertyId}_1` },
                        { text: "2", callback_data: `quantity_${propertyId}_2` },
                        { text: "3", callback_data: `quantity_${propertyId}_3` }
                    ],
                    [
                        { text: "4", callback_data: `quantity_${propertyId}_4` },
                        { text: "5", callback_data: `quantity_${propertyId}_5` },
                        { text: "–î—Ä—É–≥–æ–µ", callback_data: `quantity_${propertyId}_custom` }
                    ],
                    [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `property_${propertyId}` }]
                ]
            }
        };
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É (—Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏—é)
    static getAfterAddToCartKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data: "proceed_to_payment" }],
                    [{ text: "‚ûï –í—ã–±—Ä–∞—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä—ã", callback_data: "choose_more_items" }],
                    [{ text: "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data: "view_cart" }]
                ]
            }
        };
    }

    static getCartKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data: "payment_card" }],
                    [{ text: "üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ", callback_data: "payment_cash" }],
                    [
                        { text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data: "choose_more_items" },
                        { text: "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data: "clear_cart" }
                    ]
                ]
            }
        };
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫–∞—Ä—Ç—ã
    static getCardPaymentKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "‚úÖ –ü–µ—Ä–µ–≤—ë–ª", callback_data: "confirm_card_payment" }],
                    [
                        { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data: "view_cart" },
                        { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "back_to_start" }
                    ]
                ]
            }
        };
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏
    static getCashPaymentKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∑–∞–∫–∞–∑", callback_data: "confirm_cash_payment" }],
                    [
                        { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data: "view_cart" },
                        { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "back_to_start" }
                    ]
                ]
            }
        };
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    static getPaymentProcessingKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª", callback_data: "payment_completed" }],
                    [{ text: "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_start" }]
                ]
            }
        };
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    static getOrderCompleteKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üè† –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä—ã", callback_data: "work_with_bot" }],
                    [{ text: "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data: "contact_operator" }],
                    [{ text: "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_start" }]
                ]
            }
        };
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ - —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏ –±–µ—Ä–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î
    static async getOperatorsKeyboard() {
        try {
            const Operator = require('./models/Operator');
            const operators = await Operator.getActiveOperators();

            if (operators.length === 0) {
                // –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–∞–∫ fallback
                const keyboard = config.AVAILABLE_OPERATORS.map(operator => [
                    { text: `${operator.name} ${operator.username}`, url: `https://t.me/${operator.username.substring(1)}` }
                ]);

                keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_start" }]);

                return {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                };
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î
            const keyboard = operators.map(operator => [
                {
                    text: `${operator.name} ${operator.formattedUsername}`,
                    url: operator.getContactUrl()
                }
            ]);

            keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_start" }]);

            return {
                reply_markup: {
                    inline_keyboard: keyboard
                }
            };
        } catch (error) {
            console.error('Error getting operators from DB:', error);

            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            const keyboard = config.AVAILABLE_OPERATORS.map(operator => [
                { text: `${operator.name} ${operator.username}`, url: `https://t.me/${operator.username.substring(1)}` }
            ]);

            keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_start" }]);

            return {
                reply_markup: {
                    inline_keyboard: keyboard
                }
            };
        }
    }
}

module.exports = Keyboards;