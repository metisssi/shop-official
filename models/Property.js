const mongoose = require('mongoose');

const orderItemSchema = new mongoose.Schema({
    propertyId: { type: mongoose.Schema.Types.ObjectId, ref: 'Property', required: true },
    name: String,
    price: Number,
    quantity: { type: Number, required: true, min: 1 },
    total: Number
});

const orderSchema = new mongoose.Schema({
    userId: { type: Number, required: true },
    username: String,
    firstName: String,
    lastName: String,
    items: [orderItemSchema],
    totalAmount: { type: Number, required: true, min: 0 },
    paymentMethod: { 
        type: String, 
        enum: ['card', 'cash'], 
        default: 'cash' 
    }, // üî• –ù–û–í–û–ï: –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    status: { type: String, enum: ['new', 'confirmed', 'completed', 'cancelled'], default: 'new' }
}, { timestamps: true });

module.exports = mongoose.model('Order', orderSchema);iceInCZK) {
        return `${this.priceInCZK.toLocaleString('cs-CZ')} Kƒç`;
    }
    return `${this.price.toLocaleString('ru-RU')} ‚ÇΩ`;
});

// –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –æ–±–µ–∏—Ö –≤–∞–ª—é—Ç–∞—Ö
propertySchema.virtual('bothPrices').get(function() {
    const rubPrice = `${this.price.toLocaleString('ru-RU')} ‚ÇΩ`;
    const czkPrice = this.priceInCZK ? `${this.priceInCZK.toLocaleString('cs-CZ')} Kƒç` : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    return `${rubPrice} / ${czkPrice}`;
});

// üî• –ù–û–í–û–ï: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
propertySchema.virtual('mainPhoto').get(function() {
    const mainPhoto = this.photos.find(photo => photo.isMain);
    return mainPhoto || this.photos[0] || null;
});

// üî• –ù–û–í–û–ï: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
propertySchema.virtual('photosCount').get(function() {
    return this.photos.length;
});

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
propertySchema.methods.getPriceInCurrency = function(currency) {
    switch (currency) {
        case 'CZK':
            return {
                value: this.priceInCZK || Math.round(this.price * 0.4),
                formatted: `${(this.priceInCZK || Math.round(this.price * 0.4)).toLocaleString('cs-CZ')} Kƒç`
            };
        case 'RUB':
        default:
            return {
                value: this.price,
                formatted: `${this.price.toLocaleString('ru-RU')} ‚ÇΩ`
            };
    }
};

// üî• –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
propertySchema.methods.addPhoto = function(photoData) {
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –¥–µ–ª–∞–µ–º –µ—ë –≥–ª–∞–≤–Ω–æ–π
    if (this.photos.length === 0) {
        photoData.isMain = true;
    }
    this.photos.push(photoData);
    return this.save();
};

propertySchema.methods.removePhoto = function(photoIndex) {
    if (photoIndex >= 0 && photoIndex < this.photos.length) {
        const removedPhoto = this.photos[photoIndex];
        this.photos.splice(photoIndex, 1);
        
        // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –≥–ª–∞–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –¥–µ–ª–∞–µ–º –≥–ª–∞–≤–Ω–æ–π –ø–µ—Ä–≤—É—é –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
        if (removedPhoto.isMain && this.photos.length > 0) {
            this.photos[0].isMain = true;
        }
        
        return this.save();
    }
    return Promise.resolve(this);
};

propertySchema.methods.setMainPhoto = function(photoIndex) {
    if (photoIndex >= 0 && photoIndex < this.photos.length) {
        // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ isMain —É –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        this.photos.forEach(photo => photo.isMain = false);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–π –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        this.photos[photoIndex].isMain = true;
        return this.save();
    }
    return Promise.resolve(this);
};

// Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –≤–æ –≤—Ç–æ—Ä–æ–π –≤–∞–ª—é—Ç–µ
propertySchema.pre('save', function(next) {
    // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö, –Ω–æ –Ω–µ –≤ –∫—Ä–æ–Ω–∞—Ö
    if (this.price && !this.priceInCZK) {
        this.priceInCZK = Math.round(this.price * 0.4); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
    }
    
    // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ –∫—Ä–æ–Ω–∞—Ö, –Ω–æ –Ω–µ –≤ —Ä—É–±–ª—è—Ö
    if (this.priceInCZK && !this.price) {
        this.price = Math.round(this.priceInCZK * 2.5); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
    }
    
    next();
});

module.exports = mongoose.model('Property', propertySchema);