// adminUtils.js - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞–ª—é—Ç

const Category = require('../models/Category');
const Property = require('../models/Property');
const Order = require('../models/Order');
const User = require('../models/User');

class AdminUtils {
    constructor(bot) {
        this.bot = bot;
        this.userSessions = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        // –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ API)
        this.exchangeRates = {
            RUB_CZK: 0.4,   // 1 RUB = 0.4 CZK
            CZK_RUB: 2.5    // 1 CZK = 2.5 RUB
        };
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò ===

    // –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
    createSession(userId, type, data = {}) {
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', { userId, type, data });

        this.userSessions.set(userId, {
            type,
            data,
            createdAt: Date.now()
        });

        console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞. –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:', this.userSessions.size);
        console.log('üìã –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', Array.from(this.userSessions.entries()).map(([id, session]) => ({ id, type: session.type })));
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    getSession(userId) {
        const session = this.userSessions.get(userId);
        console.log('üîç –ó–∞–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        console.log('üìÑ –ù–∞–π–¥–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è:', session || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        return session;
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    clearSession(userId) {
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        const deleted = this.userSessions.delete(userId);
        console.log('‚úÖ –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞:', deleted);
        console.log('üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ—Å—Å–∏–∏:', this.userSessions.size);
    }
    // === –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• ===

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    validateName(name) {
        if (!name || typeof name !== 'string') {
            return { valid: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' };
        }

        const trimmed = name.trim();
        if (trimmed.length < 2) {
            return { valid: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞' };
        }

        if (trimmed.length > 100) {
            return { valid: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤' };
        }

        return { valid: true, value: trimmed };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    validateDescription(description) {
        if (!description) return { valid: true, value: '' };

        const trimmed = description.trim();
        if (trimmed.length > 500) {
            return { valid: false, error: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤' };
        }

        return { valid: true, value: trimmed };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞–ª—é—Ç
    validatePrice(priceInput) {
        const parsed = this.parsePriceWithCurrency(priceInput);

        if (!parsed.valid) {
            return parsed;
        }

        const { value, currency } = parsed;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (currency === 'CZK' && value < 50000) {
            return { valid: false, error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 50,000 Kƒç' };
        }

        if (currency === 'RUB' && value < 100000) {
            return { valid: false, error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 100,000 ‚ÇΩ' };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (value > 500000000) {
            return { valid: false, error: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 500,000,000' };
        }

        return { valid: true, value: Math.round(value), currency };
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã —Å –≤–∞–ª—é—Ç–æ–π
    parsePriceWithCurrency(text) {
        if (!text || typeof text !== 'string') {
            return { valid: false, error: '–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π' };
        }

        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        const input = text.trim().toLowerCase();

        // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const patterns = [
            /^(\d+(?:\.\d+)?)\s*(czk|—á–µ—à|–∫—Ä–æ–Ω|–∫—á–∫|kƒç)$/i,  // CZK
            /^(\d+(?:\.\d+)?)\s*(rub|—Ä—É–±|—Ä—É–±–ª|‚ÇΩ)$/i,       // RUB
            /^(\d+(?:\.\d+)?)$/                            // –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB)
        ];

        for (const pattern of patterns) {
            const match = input.match(pattern);
            if (match) {
                const value = parseFloat(match[1]);
                let currency = 'RUB'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

                if (match[2]) {
                    const currencyStr = match[2].toLowerCase();
                    if (currencyStr.includes('czk') || currencyStr.includes('—á–µ—à') ||
                        currencyStr.includes('–∫—Ä–æ–Ω') || currencyStr.includes('–∫—á–∫') ||
                        currencyStr.includes('kƒç')) {
                        currency = 'CZK';
                    }
                }

                // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–∞
                if (isNaN(value) || value <= 0) {
                    return { valid: false, error: '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' };
                }

                return { valid: true, value: Math.round(value), currency };
            }
        }

        return {
            valid: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 5000000 (—Ä—É–±–ª–∏)\n‚Ä¢ 5000000 RUB\n‚Ä¢ 2000000 CZK\n‚Ä¢ 2000000 –∫—Ä–æ–Ω\n‚Ä¢ 2000000 Kƒç'
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    validateOrder(order) {
        if (!order) return { valid: true, value: 0 };

        const numOrder = Number(order);
        if (isNaN(numOrder)) {
            return { valid: false, error: '–ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º' };
        }

        if (numOrder < 0 || numOrder > 9999) {
            return { valid: false, error: '–ü–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 9999' };
        }

        return { valid: true, value: numOrder };
    }

    // === –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–Æ–¢ ===

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
    formatPrice(price, currency = 'RUB') {
        const formatted = new Intl.NumberFormat('ru-RU').format(price);

        switch (currency) {
            case 'CZK':
                return `${formatted} Kƒç`;
            case 'RUB':
                return `${formatted} ‚ÇΩ`;
            default:
                return `${formatted} ${currency}`;
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ –æ–±–µ–∏—Ö –≤–∞–ª—é—Ç–∞—Ö
    formatPriceInBothCurrencies(priceRUB, priceCZK) {
        const rubFormatted = this.formatPrice(priceRUB, 'RUB');
        const czkFormatted = this.formatPrice(priceCZK, 'CZK');
        return `${rubFormatted} / ${czkFormatted}`;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
    convertCurrency(amount, fromCurrency, toCurrency) {
        if (fromCurrency === toCurrency) return amount;

        const rateKey = `${fromCurrency}_${toCurrency}`;
        const rate = this.exchangeRates[rateKey];

        if (!rate) {
            console.warn(`Exchange rate not found for ${rateKey}`);
            return amount;
        }

        return Math.round(amount * rate);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
    updateExchangeRates(newRates) {
        if (newRates && typeof newRates === 'object') {
            this.exchangeRates = { ...this.exchangeRates, ...newRates };
            console.log('Exchange rates updated:', this.exchangeRates);
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    formatDate(date) {
        return new Intl.DateTimeFormat('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        }).format(new Date(date));
    }

    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    async getGeneralStats() {
        try {
            const [
                categoriesCount,
                activeCategoriesCount,
                propertiesCount,
                availablePropertiesCount,
                ordersCount,
                completedOrdersCount,
                usersCount,
                totalRevenue
            ] = await Promise.all([
                Category.countDocuments(),
                Category.countDocuments({ isActive: true }),
                Property.countDocuments(),
                Property.countDocuments({ isAvailable: true }),
                Order.countDocuments(),
                Order.countDocuments({ status: 'completed' }),
                User.countDocuments(),
                Order.aggregate([
                    { $match: { status: 'completed' } },
                    { $group: { _id: null, total: { $sum: '$totalAmount' } } }
                ]).then(result => result[0]?.total || 0)
            ]);

            return {
                categories: { total: categoriesCount, active: activeCategoriesCount },
                properties: { total: propertiesCount, available: availablePropertiesCount },
                orders: { total: ordersCount, completed: completedOrdersCount },
                users: { total: usersCount },
                revenue: { total: totalRevenue }
            };
        } catch (error) {
            console.error('Get general stats error:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-5 –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º
    async getTopProperties() {
        try {
            const topProperties = await Order.aggregate([
                { $match: { status: 'completed' } },
                { $unwind: '$items' },
                {
                    $group: {
                        _id: '$items.propertyId',
                        totalOrders: { $sum: 1 },
                        totalRevenue: { $sum: '$items.total' },
                        propertyName: { $first: '$items.name' }
                    }
                },
                { $sort: { totalOrders: -1 } },
                { $limit: 5 }
            ]);

            return topProperties;
        } catch (error) {
            console.error('Get top properties error:', error);
            throw error;
        }
    }

    // === –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• ===

    // –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ
    async exportCategories() {
        try {
            const categories = await Category.find().sort({ order: 1, name: 1 });

            let csv = 'ID,–ù–∞–∑–≤–∞–Ω–∏–µ,–û–ø–∏—Å–∞–Ω–∏–µ,–ê–∫—Ç–∏–≤–Ω–∞,–ü–æ—Ä—è–¥–æ–∫,–°–æ–∑–¥–∞–Ω–∞,–û–±–Ω–æ–≤–ª–µ–Ω–∞\n';

            categories.forEach(cat => {
                const row = [
                    cat._id,
                    `"${cat.name.replace(/"/g, '""')}"`,
                    `"${(cat.description || '').replace(/"/g, '""')}"`,
                    cat.isActive ? '–î–∞' : '–ù–µ—Ç',
                    cat.order,
                    this.formatDate(cat.createdAt),
                    this.formatDate(cat.updatedAt)
                ].join(',');
                csv += row + '\n';
            });

            return csv;
        } catch (error) {
            console.error('Export categories error:', error);
            throw error;
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ
    async exportProperties() {
        try {
            const properties = await Property.find()
                .populate('categoryId')
                .sort({ order: 1, name: 1 });

            let csv = 'ID,–ù–∞–∑–≤–∞–Ω–∏–µ,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–û–ø–∏—Å–∞–Ω–∏–µ,–¶–µ–Ω–∞_RUB,–¶–µ–Ω–∞_CZK,–í–∞–ª—é—Ç–∞,–ü–ª–æ—â–∞–¥—å,–ö–æ–º–Ω–∞—Ç—ã,–≠—Ç–∞–∂,–í—Å–µ–≥–æ_—ç—Ç–∞–∂–µ–π,–ê–¥—Ä–µ—Å,–î–æ—Å—Ç—É–ø–Ω–∞,–ü–æ—Ä—è–¥–æ–∫,–°–æ–∑–¥–∞–Ω–∞,–û–±–Ω–æ–≤–ª–µ–Ω–∞\n';

            properties.forEach(prop => {
                const row = [
                    prop._id,
                    `"${prop.name.replace(/"/g, '""')}"`,
                    `"${prop.categoryId ? prop.categoryId.name.replace(/"/g, '""') : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}"`,
                    `"${(prop.description || '').replace(/"/g, '""')}"`,
                    prop.price || '',
                    prop.priceInCZK || '',
                    prop.currency || 'RUB',
                    prop.specifications?.area || '',
                    prop.specifications?.rooms || '',
                    prop.specifications?.floor || '',
                    prop.specifications?.totalFloors || '',
                    `"${(prop.specifications?.address || '').replace(/"/g, '""')}"`,
                    prop.isAvailable ? '–î–∞' : '–ù–µ—Ç',
                    prop.order,
                    this.formatDate(prop.createdAt),
                    this.formatDate(prop.updatedAt)
                ].join(',');
                csv += row + '\n';
            });

            return csv;
        } catch (error) {
            console.error('Export properties error:', error);
            throw error;
        }
    }

    // === –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ===

    // –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    async searchCategories(query) {
        try {
            const regex = new RegExp(query, 'i');
            return await Category.find({
                $or: [
                    { name: regex },
                    { description: regex }
                ]
            }).sort({ order: 1, name: 1 });
        } catch (error) {
            console.error('Search categories error:', error);
            throw error;
        }
    }

    // –ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    async searchProperties(query, categoryId = null) {
        try {
            const regex = new RegExp(query, 'i');
            const filter = {
                $or: [
                    { name: regex },
                    { description: regex },
                    { 'specifications.address': regex }
                ]
            };

            if (categoryId) {
                filter.categoryId = categoryId;
            }

            return await Property.find(filter)
                .populate('categoryId')
                .sort({ order: 1, name: 1 });
        } catch (error) {
            console.error('Search properties error:', error);
            throw error;
        }
    }

    // === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò ===

    // –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    createPaginationKeyboard(currentPage, totalPages, callbackPrefix) {
        const keyboard = [];

        if (totalPages > 1) {
            const paginationRow = [];

            if (currentPage > 1) {
                paginationRow.push({
                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                    callback_data: `${callbackPrefix}_${currentPage - 1}`
                });
            }

            paginationRow.push({
                text: `${currentPage}/${totalPages}`,
                callback_data: 'current_page'
            });

            if (currentPage < totalPages) {
                paginationRow.push({
                    text: '–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è',
                    callback_data: `${callbackPrefix}_${currentPage + 1}`
                });
            }

            keyboard.push(paginationRow);
        }

        return keyboard;
    }

    // –†–∞–∑–¥–µ–ª–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    paginate(array, page, itemsPerPage = 5) {
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const items = array.slice(startIndex, endIndex);
        const totalPages = Math.ceil(array.length / itemsPerPage);

        return {
            items,
            currentPage: page,
            totalPages,
            totalItems: array.length,
            hasNext: page < totalPages,
            hasPrev: page > 1
        };
    }

    // === BACKUP –ò RESTORE ===

    // –°–æ–∑–¥–∞—Ç—å backup –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    async createBackup() {
        try {
            const [categories, properties, orders, users] = await Promise.all([
                Category.find(),
                Property.find(),
                Order.find(),
                User.find()
            ]);

            const backup = {
                timestamp: new Date().toISOString(),
                version: '1.0',
                data: {
                    categories,
                    properties,
                    orders,
                    users
                }
            };

            return JSON.stringify(backup, null, 2);
        } catch (error) {
            console.error('Create backup error:', error);
            throw error;
        }
    }

    // === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í ===

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    async notifyAdmins(message, keyboard = null) {
        const adminConfig = require('../config/adminConfig');
        const adminIds = adminConfig.getAdminIds();

        const promises = adminIds.map(adminId => {
            const options = { parse_mode: 'Markdown' };
            if (keyboard) {
                options.reply_markup = keyboard;
            }

            return this.bot.sendMessage(adminId, message, options)
                .catch(error => {
                    console.error(`Failed to notify admin ${adminId}:`, error);
                });
        });

        await Promise.allSettled(promises);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    async notifyNewOrder(order) {
        const user = await User.findOne({ userId: order.userId });
        const userName = user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

        const message = `üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n` +
            `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${userName}\n` +
            `üí∞ *–°—É–º–º–∞:* ${this.formatPrice(order.totalAmount)}\n` +
            `üìù *–¢–æ–≤–∞—Ä–æ–≤:* ${order.items.length}\n` +
            `üïê *–í—Ä–µ–º—è:* ${this.formatDate(order.createdAt)}`;

        const keyboard = {
            inline_keyboard: [[
                { text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑', callback_data: `admin_view_order_${order._id}` }
            ]]
        };

        await this.notifyAdmins(message, keyboard);
    }

    // === –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• ===

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π (–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
    startSessionCleaner() {
        setInterval(() => {
            this.clearOldSessions();
        }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    async cleanupInactiveCategories() {
        try {
            const inactiveCategories = await Category.find({ isActive: false });
            const cleanedIds = [];

            for (const category of inactiveCategories) {
                const propertiesCount = await Property.countDocuments({ categoryId: category._id });
                if (propertiesCount === 0) {
                    await Category.findByIdAndDelete(category._id);
                    cleanedIds.push(category._id);
                }
            }

            return cleanedIds;
        } catch (error) {
            console.error('Cleanup inactive categories error:', error);
            throw error;
        }
    }

    // === –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–û–í ===

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥
    async generateSalesReport(startDate, endDate) {
        try {
            const orders = await Order.find({
                status: 'completed',
                createdAt: { $gte: startDate, $lte: endDate }
            }).populate({
                path: 'items.propertyId',
                populate: { path: 'categoryId' }
            });

            const report = {
                period: { start: startDate, end: endDate },
                totalOrders: orders.length,
                totalRevenue: orders.reduce((sum, order) => sum + order.totalAmount, 0),
                avgOrderValue: 0,
                topCategories: {},
                topProperties: {},
                dailySales: {}
            };

            // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
            if (report.totalOrders > 0) {
                report.avgOrderValue = report.totalRevenue / report.totalOrders;
            }

            // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –æ–±—ä–µ–∫—Ç–∞–º
            orders.forEach(order => {
                const date = order.createdAt.toISOString().split('T')[0];

                // –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º
                if (!report.dailySales[date]) {
                    report.dailySales[date] = { orders: 0, revenue: 0 };
                }
                report.dailySales[date].orders++;
                report.dailySales[date].revenue += order.totalAmount;

                // –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
                order.items.forEach(item => {
                    if (item.propertyId) {
                        const categoryName = item.propertyId.categoryId?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
                        const propertyName = item.propertyId.name;

                        // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if (!report.topCategories[categoryName]) {
                            report.topCategories[categoryName] = { orders: 0, revenue: 0 };
                        }
                        report.topCategories[categoryName].orders++;
                        report.topCategories[categoryName].revenue += item.total;

                        // –¢–æ–ø –æ–±—ä–µ–∫—Ç—ã
                        if (!report.topProperties[propertyName]) {
                            report.topProperties[propertyName] = { orders: 0, revenue: 0 };
                        }
                        report.topProperties[propertyName].orders++;
                        report.topProperties[propertyName].revenue += item.total;
                    }
                });
            });

            return report;
        } catch (error) {
            console.error('Generate sales report error:', error);
            throw error;
        }
    }
}

module.exports = AdminUtils;